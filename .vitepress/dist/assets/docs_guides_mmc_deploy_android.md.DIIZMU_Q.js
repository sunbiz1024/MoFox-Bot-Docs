import{_ as p,I as n,c as h,o as g,a3 as o,j as s,J as t,a as l,w as a}from"./chunks/framework.Coydrlbh.js";const f=JSON.parse('{"title":"📱 MoFox_Bot Android 部署指南 (内置适配器版)","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guides/mmc_deploy_android.md","filePath":"docs/guides/mmc_deploy_android.md","lastUpdated":1758366956000}'),k={name:"docs/guides/mmc_deploy_android.md"};function u(c,i,b,F,y,m){const e=n("VPNolebaseInlineLinkPreview"),r=n("NolebaseGitContributors"),d=n("NolebaseGitChangelog");return g(),h("div",null,[i[32]||(i[32]=o('<h1 id="📱-mofox-bot-android-部署指南-内置适配器版" tabindex="-1">📱 MoFox_Bot Android 部署指南 (内置适配器版) <a class="header-anchor" href="#📱-mofox-bot-android-部署指南-内置适配器版" aria-label="Permalink to “📱 MoFox_Bot Android 部署指南 (内置适配器版)”">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to “概述”">​</a></h2><p>欢迎使用 MoFox_Bot，一个高度可定制化的 AI Bot 框架。</p><p>本指南将引导您在 Android (Termux) 环境下，使用项目<strong>内置的 Napcat 适配器插件</strong>完成 MoFox_Bot 的全部署流程。该方式是官方推荐的最佳实践，具有以下优势：</p><ul><li><strong>部署简化</strong>：仅需下载和运行 MoFox_Bot 主项目。</li><li><strong>操作便捷</strong>：只需管理单个后台进程。</li><li><strong>配置统一</strong>：所有相关设置均在主项目的配置文件中完成。</li></ul><p>本教程将覆盖从环境准备到成功运行的每一个步骤，旨在为初学者提供一条清晰、高效的部署路径。</p><h2 id="第一章-准备工作——在手机上开辟新天地" tabindex="-1">第一章：准备工作——在手机上开辟新天地 <a class="header-anchor" href="#第一章-准备工作——在手机上开辟新天地" aria-label="Permalink to “第一章：准备工作——在手机上开辟新天地”">​</a></h2><p>在正式开始部署之前，我们需要先在你的安卓设备上搭建好一个功能完备的 Linux 环境。</p><h3 id="_1-1-系统要求" tabindex="-1">1.1 系统要求 <a class="header-anchor" href="#_1-1-系统要求" aria-label="Permalink to “1.1 系统要求”">​</a></h3><ul><li><strong>Android 版本</strong>: &gt;= 7.0</li><li><strong>芯片架构</strong>: AArch64 (目前主流手机均满足)</li><li><strong>存储空间</strong>: 至少 2GB 可用空间</li></ul><h3 id="_1-2-termux-环境-ubuntu-虚拟机" tabindex="-1">1.2 Termux 环境 -&gt; Ubuntu 虚拟机 <a class="header-anchor" href="#_1-2-termux-环境-ubuntu-虚拟机" aria-label="Permalink to “1.2 Termux 环境 -&gt; Ubuntu 虚拟机”">​</a></h3><p>我们需要借助 <code>Termux</code> 这个强大的终端模拟器，并在其中安装一个 Ubuntu 系统，来为 MoFox_Bot 提供一个稳定、完整的运行环境。</p>',12)),s("ol",null,[s("li",null,[i[7]||(i[7]=s("p",null,[s("strong",null,"安装 ZeroTermux"),l(":")],-1)),s("ul",null,[s("li",null,[i[1]||(i[1]=l("前往 ",-1)),t(e,{href:"https://github.com/hanxinhao000/ZeroTermux/releases/tag/release",target:"_blank",rel:"noreferrer"},{default:a(()=>[...i[0]||(i[0]=[l("ZeroTermux Github Releases",-1)])]),_:1}),i[2]||(i[2]=l(" 下载并安装最新的 ",-1)),i[3]||(i[3]=s("code",null,"ZeroTermux",-1)),i[4]||(i[4]=l(" 安装包。",-1))]),i[5]||(i[5]=s("li",null,[s("blockquote",null,[s("p",null,[s("strong",null,"注意"),l(": 使用其他版本的 Termux 可能会导致部分步骤不适用。")])])],-1)),i[6]||(i[6]=s("li",null,"安装后，打开 ZeroTermux，按照提示完成初始化设置。建议在侧边栏菜单中选择“切换源”，并选择一个国内的镜像源（如清华源）以提高后续的下载速度。",-1))])]),i[8]||(i[8]=o(`<li><p><strong>安装 proot 和 Ubuntu</strong>:</p><ul><li>在 ZeroTermux 中，逐行执行以下命令来安装 <code>proot</code> 和 Ubuntu 环境。<div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pkg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> proot-distro</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 安装 proot</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">proot-distro</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 安装 Ubuntu</span></span></code></pre></div></li></ul></li><li><p><strong>登录 Ubuntu</strong>:</p><ul><li>安装完成后，执行以下命令登录到 Ubuntu 环境：<div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">proot-distro</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu</span></span></code></pre></div></li><li>成功登录后，你将处于 Ubuntu 的 shell 环境中。<strong>后续的所有命令行操作，都将在这个 Ubuntu 环境中进行。</strong></li></ul></li>`,2))]),i[33]||(i[33]=o(`<h3 id="_1-3-软件三件套-python、git-与-uv" tabindex="-1">1.3 软件三件套：Python、Git 与 uv <a class="header-anchor" href="#_1-3-软件三件套-python、git-与-uv" aria-label="Permalink to “1.3 软件三件套：Python、Git 与 uv”">​</a></h3><p>这三款软件是部署流程的核心工具，缺一不可。</p><ol><li><p><strong>安装基础软件包</strong>:</p><ul><li>在 Ubuntu 环境中，首先更新包列表并安装核心工具：<div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python3-pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python3-dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python3.12-venv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build-essential</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> screen</span></span></code></pre></div></li><li><blockquote><p>在后续步骤中，如果出现 <code>(Y/I/N/O/D/Z)[default=?]</code> 或 <code>[Y/N]</code> 的提示，直接按回车键选择默认选项即可。</p></blockquote></li></ul></li><li><p><strong>验证 Python (版本 &gt;= 3.10)</strong>:</p><ul><li>在终端中输入 <code>python3 --version</code> 并回车。如果显示出版本号（如 <code>Python 3.10.6</code>），则证明安装成功。</li></ul></li><li><p><strong>验证 Git</strong>:</p><ul><li>在终端中输入 <code>git --version</code> 并回车。如果显示出版本号（如 <code>git version 2.34.1</code>），则证明安装成功。</li></ul></li><li><p><strong>安装 uv (推荐的 Python 包管理器)</strong>:</p><ul><li>uv 是一个速度极快的 Python 包管理器，我们强烈推荐使用它来管理项目依赖。</li><li>执行以下命令安装 uv：<div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> uv</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --break-system-packages</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://repo.huaweicloud.com/repository/pypi/simple/</span></span></code></pre></div></li><li>为了让系统能找到 <code>uv</code> 命令，需要将它所在的路径添加到环境变量中。执行以下命令：<div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;export PATH=&quot;$HOME/.local/bin:$PATH&quot;&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.bashrc</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.bashrc</span></span></code></pre></div></li><li><strong>验证</strong>: 输入 <code>uv --version</code> 并回车，如果显示出版本号，则证明安装成功。</li></ul></li></ol><h3 id="_1-4-napcat-qq-客户端-android-app" tabindex="-1">1.4 Napcat QQ 客户端 (Android App) <a class="header-anchor" href="#_1-4-napcat-qq-客户端-android-app" aria-label="Permalink to “1.4 Napcat QQ 客户端 (Android App)”">​</a></h3><p>Napcat QQ 是一个 QQ 客户端，也是 MoFox_Bot 与 QQ 平台沟通的桥梁。</p>`,5)),s("p",null,[i[12]||(i[12]=l("在继续下一步之前，请",-1)),s("strong",null,[i[10]||(i[10]=l("务必参考 ",-1)),t(e,{href:"https://napcat.napneko.icu/",target:"_blank",rel:"noreferrer"},{default:a(()=>[...i[9]||(i[9]=[l("NapCatQQ 官方文档",-1)])]),_:1}),i[11]||(i[11]=l("，在你的安卓手机上完成客户端 App 的安装、配置，并确保你的 QQ 账号能够成功登录",-1))]),i[13]||(i[13]=l("。这是整个部署流程的重要前置条件。",-1))]),i[34]||(i[34]=o(`<h2 id="第二章-获取核心——请君入瓮" tabindex="-1">第二章：获取核心——请君入瓮 <a class="header-anchor" href="#第二章-获取核心——请君入瓮" aria-label="Permalink to “第二章：获取核心——请君入瓮”">​</a></h2><p>万事俱备，现在我们正式开始将 MoFox_Bot 的核心代码下载到你的手机中。</p><ol><li><p><strong>创建并进入文件夹</strong>:</p><ul><li>在 Ubuntu 终端中，执行以下命令，这会在你的用户主目录下创建一个名为 <code>MoFox_Bot_Deployment</code> 的文件夹，并进入该目录。<div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MoFox_Bot_Deployment</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MoFox_Bot_Deployment</span></span></code></pre></div></li><li><blockquote><p><strong>⚠️ 重要提示</strong>: 为了避免未来可能出现的奇怪问题，请确保文件夹的<strong>完整路径中不包含任何中文、空格或特殊字符</strong>。</p></blockquote></li></ul></li><li><p><strong><code>git clone</code> 神威</strong>:</p><ul><li>在终端中，粘贴并执行以下命令：<div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/MoFox-Studio/MoFox_Bot.git</span></span></code></pre></div></li><li><blockquote><p><strong>🌐 网络小贴士</strong>:</p></blockquote></li><li><blockquote><p>如果你发现下载速度极慢或连接失败，可以尝试使用备用镜像地址，例如 <code>https://kgithub.com/MoFox-Studio/MoFox_Bot.git</code>。</p></blockquote></li></ul></li></ol><h2 id="第三章-激活环境——注入灵魂" tabindex="-1">第三章：激活环境——注入灵魂 <a class="header-anchor" href="#第三章-激活环境——注入灵魂" aria-label="Permalink to “第三章：激活环境——注入灵魂”">​</a></h2><p>我们已经有了机器人的“素体”（项目代码），现在需要为它创建一个纯净的生存空间（虚拟环境），并注入“灵魂”（安装所有必需的程序库）。</p><ol><li><p><strong>进入项目目录</strong>:</p><ul><li>执行 <code>cd MoFox_Bot</code> 进入刚刚克隆下来的文件夹。</li></ul></li><li><p><strong>创建并激活虚拟环境</strong>:</p><ul><li>我们将使用 <code>uv</code> 来完成环境的创建和激活。<div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建虚拟环境</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> venv</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 激活虚拟环境 (核心步骤)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .venv/bin/activate</span></span></code></pre></div></li><li><strong>观察变化！</strong> 成功激活后，你会看到命令行提示符的最前面，多出了一个 <code>(.venv)</code> 的标记。这表示你已经成功进入了 MoFox_Bot 的专属环境。</li><li><blockquote><p><strong>⚠️ 重要提示</strong>: 之后所有的安装、运行操作，都<strong>必须</strong>在这个带有 <code>(.venv)</code> 标记的命令行窗口中进行。</p></blockquote></li></ul></li><li><p><strong>依赖安装：一行代码搞定</strong>:</p><ul><li>在<strong>已激活虚拟环境</strong>的命令行窗口中，执行以下命令：<div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requirements.txt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://mirrors.aliyun.com/pypi/simple</span></span></code></pre></div></li><li>请耐心等待，直到它全部完成。</li></ul></li></ol><h2 id="第四章-核心配置——让机器人-认识-你" tabindex="-1">第四章：核心配置——让机器人“认识”你 <a class="header-anchor" href="#第四章-核心配置——让机器人-认识-你" aria-label="Permalink to “第四章：核心配置——让机器人“认识”你”">​</a></h2>`,7)),s("p",null,[i[15]||(i[15]=l("此步骤与 ",-1)),t(e,{href:"./mmc_deploy_linux.html"},{default:a(()=>[...i[14]||(i[14]=[l("Linux 部署指南",-1)])]),_:1}),i[16]||(i[16]=l(" 中的配置过程 ",-1)),i[17]||(i[17]=s("strong",null,"完全相同",-1)),i[18]||(i[18]=l("。请参考该指南的第四章，或按以下摘要步骤完成配置：",-1))]),s("ol",null,[i[26]||(i[26]=o("<li><p><strong><code>.env</code> 文件</strong>:</p><ul><li>执行 <code>cp template/template.env .env</code>。</li><li>编辑 <code>.env</code> 文件，将 <code>EULA_CONFIRMED</code> 修改为 <code>true</code>。</li></ul></li><li><p><strong><code>bot_config.toml</code> 文件</strong>:</p><ul><li>执行 <code>cp template/bot_config_template.toml config/bot_config.toml</code>。</li><li>编辑 <code>config/bot_config.toml</code> 文件，至少修改 <code>[bot]</code> 下的 <code>qq_account</code> (机器人QQ号) 和 <code>[permission]</code> 下的 <code>master_users</code> (主人QQ号)。</li></ul></li>",2)),s("li",null,[i[25]||(i[25]=s("p",null,[s("strong",null,[s("code",null,"model_config.toml"),l(" 文件")]),l(":")],-1)),s("ul",null,[i[24]||(i[24]=s("li",null,[l("执行 "),s("code",null,"cp template/model_config_template.toml config/model_config.toml"),l("。")],-1)),s("li",null,[i[20]||(i[20]=l("参照 ",-1)),s("strong",null,[t(e,{href:"./quick_start_model_config.html"},{default:a(()=>[...i[19]||(i[19]=[l("模型配置快速上手指南",-1)])]),_:1})]),i[21]||(i[21]=l("，编辑 ",-1)),i[22]||(i[22]=s("code",null,"config/model_config.toml",-1)),i[23]||(i[23]=l(" 文件，至少配置一个可用的大语言模型。",-1))])])])]),i[35]||(i[35]=s("h2",{id:"第五章-连接世界——内置适配器插件配置",tabindex:"-1"},[l("第五章：连接世界——内置适配器插件配置 "),s("a",{class:"header-anchor",href:"#第五章-连接世界——内置适配器插件配置","aria-label":"Permalink to “第五章：连接世界——内置适配器插件配置”"},"​")],-1)),s("p",null,[i[28]||(i[28]=l("此步骤与 ",-1)),t(e,{href:"./mmc_deploy_linux.html"},{default:a(()=>[...i[27]||(i[27]=[l("Linux 部署指南",-1)])]),_:1}),i[29]||(i[29]=l(" 中的配置过程 ",-1)),i[30]||(i[30]=s("strong",null,"完全相同",-1)),i[31]||(i[31]=l("。",-1))]),i[36]||(i[36]=o('<ol><li><p><strong>首次启动生成配置</strong>:</p><ul><li>在<strong>已激活虚拟环境</strong>的终端中，执行 <code>uv run python bot.py</code>。</li><li>等待程序初始化完成（日志停止滚动）后，按下 <code>Ctrl + C</code> 关闭程序。</li></ul></li><li><p><strong>启用并配置插件</strong>:</p><ul><li>编辑 <code>config/plugins/napcat_adapter_plugin/config.toml</code> 文件。</li><li>将 <code>[plugin]</code> 下的 <code>enabled</code> 修改为 <code>true</code>。</li><li>确认 <code>[napcat_server]</code> 下的 <code>port</code> 值（默认为 <code>8095</code>），与你在 <strong>安卓 Napcat QQ 客户端</strong> 中设置的<strong>反向 WebSocket</strong> 端口号<strong>完全一致</strong>。</li></ul></li></ol><h2 id="第六章-启动-——见证奇迹的时刻" tabindex="-1">第六章：启动！——见证奇迹的时刻 <a class="header-anchor" href="#第六章-启动-——见证奇迹的时刻" aria-label="Permalink to “第六章：启动！——见证奇迹的时刻”">​</a></h2><p>在 Android (Termux) 环境下，由于没有图形化桌面，我们需要使用 <code>screen</code> 工具来确保程序在后台持续运行。</p><ol><li><p><strong>第一步：启动并登录 Napcat QQ App</strong></p><ul><li>打开你已经安装好的 Napcat QQ 客户端 App，并确保机器人 QQ 账号<strong>成功登录</strong>。</li></ul></li><li><p><strong>第二步：运行 MoFox_Bot (后台运行)</strong></p><ul><li>回到你的 Termux 终端窗口 (Ubuntu 环境内)。</li><li><strong>检查两件事</strong>: <ol><li>确认命令行提示符最左边有 <code>(.venv)</code> 标记。</li><li>确认当前路径在 <code>MoFox_Bot</code> 文件夹内。</li></ol></li><li>执行以下命令，创建并进入一个名为 <code>mofox</code> 的后台会话：<div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">screen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mofox</span></span></code></pre></div></li><li>在 <code>screen</code> 会话中，执行最终的启动命令：<div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bot.py</span></span></code></pre></div></li><li>当你在日志中看到成功连接的信息后，可以按下 <code>Ctrl + A</code> 然后再按 <code>D</code> 键，将此会话分离到后台。程序将继续运行。</li></ul></li><li><p><strong>测试机器人</strong>:</p><ul><li>现在，打开你的 QQ，向你的机器人账号发送一条消息。如果它回复了你，那么……</li><li><strong>恭喜你，部署成功！</strong></li></ul></li></ol><h3 id="如何管理后台会话" tabindex="-1">如何管理后台会话 <a class="header-anchor" href="#如何管理后台会话" aria-label="Permalink to “如何管理后台会话”">​</a></h3><ul><li><code>screen -ls</code>: 列出所有正在运行的 <code>screen</code> 会话。</li><li><code>screen -r mofox</code>: 重新连接到名为 <code>mofox</code> 的会话，查看程序实时日志。</li><li>在会话内按 <code>Ctrl + C</code> 可以关闭机器人程序。</li></ul><h2 id="第七章-故障排除" tabindex="-1">第七章：故障排除 <a class="header-anchor" href="#第七章-故障排除" aria-label="Permalink to “第七章：故障排除”">​</a></h2><details><summary><b>Q1: 启动成功，但日志里迟迟没有 `Napcat client connected` 信息？</b></summary><p>这通常意味着 MoFox_Bot 和 Napcat QQ 客户端之间的“神经”没有接上。请按以下步骤排查：</p><ol><li><strong>检查 Napcat QQ App</strong>: 确保 Napcat QQ 客户端 App 本身已成功登录并处于在线状态，没有被系统后台杀死。</li><li><strong>检查端口号</strong>: 这是最常见的原因。请再次核对 <code>config/plugins/napcat_adapter_plugin/config.toml</code> 文件中 <code>[napcat_server]</code> 下的 <code>port</code> 值，是否与你 Napcat QQ 客户端里设置的<strong>反向 WebSocket 端口</strong>完全一致。</li><li><strong>检查 Termux 网络权限</strong>: 确保 Termux 具有访问网络的权限。</li></ol></details><details><summary><b>Q2: 机器人成功连接，但在 QQ 里不回复？</b></summary><p>这通常是配置问题或模型服务问题。</p><ol><li><strong>检查模型配置</strong>: 确认 <code>config/model_config.toml</code> 里的 API Key 是<strong>有效且可用</strong>的。</li><li><strong>检查白名单</strong>: 检查 <code>config/plugins/napcat_adapter_plugin/config.toml</code> 文件中 <code>[features]</code> 部分的 <code>group_list</code> 和 <code>private_list</code>。如果你开启了白名单，请确保你测试的群聊或私聊已经被加了进去。</li><li><strong>查看日志</strong>: 使用 <code>screen -r mofox</code> 连接回后台，当你给机器人发消息时，看看日志是否刷新，是否有 <code>ERROR</code> 级别的红色错误信息。</li></ol></details><details><summary><b>Q3: 我修改了配置文件，但好像没有生效？</b></summary><p>MoFox_Bot 在启动时会加载所有配置文件。如果你在机器人运行中修改了配置，需要<strong>重启</strong>才能生效。</p><ul><li>使用 <code>screen -r mofox</code> 连接回后台。</li><li>按下 <code>Ctrl + C</code> 关闭机器人。</li><li>待程序完全退出后，再重新执行 <code>uv run python bot.py</code> 命令来启动机器人。</li></ul></details><h2 id="结语-你的冒险才刚刚开始" tabindex="-1">结语：你的冒险才刚刚开始 <a class="header-anchor" href="#结语-你的冒险才刚刚开始" aria-label="Permalink to “结语：你的冒险才刚刚开始”">​</a></h2><p>至此，你已经成功在安卓设备上走完了 MoFox_Bot 的部署全程。但这仅仅是一个开始。去探索、去定制，让你的专属 AI 伙伴在你的手机里大放异彩吧！</p>',12)),t(r),t(d)])}const _=p(k,[["render",u]]);export{f as __pageData,_ as default};
