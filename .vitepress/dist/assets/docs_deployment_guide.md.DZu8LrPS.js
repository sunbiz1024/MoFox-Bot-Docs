import{_ as s,c as a,o as e,af as t}from"./chunks/framework.Du4BpUy5.js";const k=JSON.parse('{"title":"MoFox_Bot 部署指南","description":"","frontmatter":{},"headers":[],"relativePath":"docs/deployment_guide.md","filePath":"docs/deployment_guide.md"}'),l={name:"docs/deployment_guide.md"};function o(n,i,h,p,d,r){return e(),a("div",null,[...i[0]||(i[0]=[t(`<h1 id="mofox-bot-部署指南" tabindex="-1">MoFox_Bot 部署指南 <a class="header-anchor" href="#mofox-bot-部署指南" aria-label="Permalink to “MoFox_Bot 部署指南”">​</a></h1><p>欢迎使用 MoFox_Bot！本指南将引导您完成在 Windows 环境下部署 MoFox_Bot 的全部过程。</p><h2 id="_1-系统要求" tabindex="-1">1. 系统要求 <a class="header-anchor" href="#_1-系统要求" aria-label="Permalink to “1. 系统要求”">​</a></h2><ul><li><strong>操作系统</strong>: Windows 10 或 Windows 11</li><li><strong>Python</strong>: 版本 &gt;= 3.10</li><li><strong>Git</strong>: 用于克隆项目仓库</li><li><strong>uv</strong>: 推荐的 Python 包管理器 (版本 &gt;= 0.1.0)</li></ul><h2 id="_2-部署步骤" tabindex="-1">2. 部署步骤 <a class="header-anchor" href="#_2-部署步骤" aria-label="Permalink to “2. 部署步骤”">​</a></h2><h3 id="第一步-获取必要的文件" tabindex="-1">第一步：获取必要的文件 <a class="header-anchor" href="#第一步-获取必要的文件" aria-label="Permalink to “第一步：获取必要的文件”">​</a></h3><p>首先，创建一个用于存放 MoFox_Bot 相关文件的文件夹，并通过 <code>git</code> 克隆 MoFox_Bot 主程序和 Napcat 适配器。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MoFox_Bot_Deployment</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MoFox_Bot_Deployment</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hhttps://github.com/MoFox-Studio/MoFox_Bot.git</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/MoFox-Studio/Napcat-Adapter.git</span></span></code></pre></div><h3 id="第二步-环境配置" tabindex="-1">第二步：环境配置 <a class="header-anchor" href="#第二步-环境配置" aria-label="Permalink to “第二步：环境配置”">​</a></h3><p>我们推荐使用 <code>uv</code> 来管理 Python 环境和依赖，因为它提供了更快的安装速度和更好的依赖管理体验。</p><p><strong>安装 uv:</strong></p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> uv</span></span></code></pre></div><h3 id="第三步-依赖安装" tabindex="-1">第三步：依赖安装 <a class="header-anchor" href="#第三步-依赖安装" aria-label="Permalink to “第三步：依赖安装”">​</a></h3><p><strong>1. 安装 MoFox_Bot 依赖:</strong></p><p>进入 <code>mmc</code> 文件夹，创建虚拟环境并安装依赖。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mmc</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> venv</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requirements.txt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://mirrors.aliyun.com/pypi/simple</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --upgrade</span></span></code></pre></div><p><strong>2. 安装 Napcat-Adapter 依赖:</strong></p><p>回到上一级目录，进入 <code>Napcat-Adapter</code> 文件夹，创建虚拟环境并安装依赖。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Napcat-Adapter</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> venv</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requirements.txt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://mirrors.aliyun.com/pypi/simple</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --upgrade</span></span></code></pre></div><h3 id="第四步-配置-mofox-bot-和-adapter" tabindex="-1">第四步：配置 MoFox_Bot 和 Adapter <a class="header-anchor" href="#第四步-配置-mofox-bot-和-adapter" aria-label="Permalink to “第四步：配置 MoFox_Bot 和 Adapter”">​</a></h3><p><strong>1. MoFox_Bot 配置:</strong></p><ul><li>在 <code>mmc</code> 文件夹中，将 <code>template/bot_config_template.toml</code> 复制到 <code>config/bot_config.toml</code>。</li><li>将 <code>template/model_config_template.toml</code> 复制到 <code>config/model_config.toml</code>。</li><li>根据 <a href="./guides/model_configuration_guide.html">模型配置指南</a> 和 <code>bot_config.toml</code> 文件中的注释，填写您的 API Key 和其他相关配置。</li></ul><p><strong>2. Napcat-Adapter 配置:</strong></p><ul><li>在 <code>Napcat-Adapter</code> 文件夹中，将 <code>template/template_config.toml</code> 复制到根目录并改名为 <code>config.toml</code>。</li><li>打开 <code>config.toml</code> 文件，配置 <code>[Napcat_Server]</code> 和 <code>[MaiBot_Server]</code> 字段。 <ul><li><code>[Napcat_Server]</code> 的 <code>port</code> 应与 Napcat 设置的反向代理 URL 中的端口相同。</li><li><code>[MaiBot_Server]</code> 的 <code>port</code> 应与 MoFox_Bot 的 <code>bot_config.toml</code> 中设置的端口相同。</li></ul></li></ul><h3 id="第五步-运行" tabindex="-1">第五步：运行 <a class="header-anchor" href="#第五步-运行" aria-label="Permalink to “第五步：运行”">​</a></h3><p><strong>1. 启动 Napcat:</strong></p><p>请参考 <a href="https://napcat.napneko.icu/" target="_blank" rel="noreferrer">NapCatQQ 文档</a> 进行部署和启动。</p><p><strong>2. 启动 MoFox_Bot:</strong></p><p>进入 <code>mmc</code> 文件夹，使用 <code>uv</code> 运行。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mmc</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bot.py</span></span></code></pre></div><p><strong>3. 启动 Napcat-Adapter:</strong></p><p>打开一个新的终端窗口，进入 <code>Napcat-Adapter</code> 文件夹，使用 <code>uv</code> 运行。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Napcat-Adapter</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.py</span></span></code></pre></div><p>至此，MoFox_Bot 已成功部署并运行。</p><h2 id="_3-详细配置说明" tabindex="-1">3. 详细配置说明 <a class="header-anchor" href="#_3-详细配置说明" aria-label="Permalink to “3. 详细配置说明”">​</a></h2><h3 id="bot-config-toml" tabindex="-1"><code>bot_config.toml</code> <a class="header-anchor" href="#bot-config-toml" aria-label="Permalink to “bot_config.toml”">​</a></h3><p>这是 MoFox_Bot 的主配置文件，包含了机器人昵称、主人QQ、命令前缀、数据库设置等。请根据文件内的注释进行详细配置。</p><h3 id="model-config-toml" tabindex="-1"><code>model_config.toml</code> <a class="header-anchor" href="#model-config-toml" aria-label="Permalink to “model_config.toml”">​</a></h3><p>此文件用于配置 AI 模型和 API 服务提供商。详细配置方法请参考 <a href="./guides/model_configuration_guide.html">模型配置指南</a>。</p><h3 id="插件配置" tabindex="-1">插件配置 <a class="header-anchor" href="#插件配置" aria-label="Permalink to “插件配置”">​</a></h3><p>每个插件都有独立的配置文件，位于 <code>mmc/config/plugins/</code> 目录下。插件的配置由其 <code>config_schema</code> 自动生成。详细信息请参考 <a href="./plugins/configuration-guide.html">插件配置完整指南</a>。</p><h2 id="_4-故障排除" tabindex="-1">4. 故障排除 <a class="header-anchor" href="#_4-故障排除" aria-label="Permalink to “4. 故障排除”">​</a></h2><ul><li><strong>依赖安装失败</strong>: <ul><li>尝试更换 PyPI 镜像源。</li><li>检查网络连接。</li></ul></li><li><strong>API 调用失败</strong>: <ul><li>检查 <code>model_config.toml</code> 中的 API Key 和 <code>base_url</code> 是否正确。</li></ul></li><li><strong>无法连接到 Napcat</strong>: <ul><li>检查 Napcat 是否正常运行。</li><li>确认 <code>Napcat-Adapter</code> 的 <code>config.toml</code> 中 <code>[Napcat_Server]</code> 的 <code>port</code> 是否与 Napcat 设置的端口一致。</li></ul></li></ul><p>如果遇到其他问题，请查看 <code>logs/</code> 目录下的日志文件以获取详细的错误信息。</p>`,44)])])}const g=s(l,[["render",o]]);export{k as __pageData,g as default};
