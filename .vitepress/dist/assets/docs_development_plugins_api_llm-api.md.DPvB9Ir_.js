import{_ as p,I as l,c as k,o as r,a3 as o,j as i,J as n,a,w as d}from"./chunks/framework.Coydrlbh.js";const b=JSON.parse('{"title":"LLM API","description":"","frontmatter":{},"headers":[],"relativePath":"docs/development/plugins/api/llm-api.md","filePath":"docs/development/plugins/api/llm-api.md","lastUpdated":1756555974000}'),E={name:"docs/development/plugins/api/llm-api.md"};function g(y,s,u,F,c,C){const t=l("VPNolebaseInlineLinkPreview"),e=l("NolebaseGitContributors"),h=l("NolebaseGitChangelog");return r(),k("div",null,[s[11]||(s[11]=o(`<h1 id="llm-api" tabindex="-1">LLM API <a class="header-anchor" href="#llm-api" aria-label="Permalink to “LLM API”">​</a></h1><p>LLM API模块提供与大语言模型交互的功能，让插件能够使用系统配置的LLM模型进行内容生成。</p><h2 id="导入方式" tabindex="-1">导入方式 <a class="header-anchor" href="#导入方式" aria-label="Permalink to “导入方式”">​</a></h2><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> src.plugin_system.apis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> llm_api</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 或者</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> src.plugin_system </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> llm_api</span></span></code></pre></div><h2 id="主要功能" tabindex="-1">主要功能 <a class="header-anchor" href="#主要功能" aria-label="Permalink to “主要功能”">​</a></h2><h3 id="_1-查询可用模型" tabindex="-1">1. 查询可用模型 <a class="header-anchor" href="#_1-查询可用模型" aria-label="Permalink to “1. 查询可用模型”">​</a></h3><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_available_models</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() -&gt; Dict[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, TaskConfig]:</span></span></code></pre></div><p>获取所有可用的模型配置。</p><p><strong>Return：</strong></p><ul><li><code>Dict[str, TaskConfig]</code>：模型配置字典，key为模型名称，value为模型配置对象。</li></ul><h3 id="_2-使用模型生成内容" tabindex="-1">2. 使用模型生成内容 <a class="header-anchor" href="#_2-使用模型生成内容" aria-label="Permalink to “2. 使用模型生成内容”">​</a></h3><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generate_with_model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    prompt: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model_config: TaskConfig,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    request_type: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;plugin.generate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    temperature: Optional[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    max_tokens: Optional[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; Tuple[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]:</span></span></code></pre></div><p>使用指定模型生成内容。</p><p><strong>Args:</strong></p><ul><li><code>prompt</code>：提示词。</li><li><code>model_config</code>：模型配置对象（从 <code>get_available_models</code> 获取）。</li><li><code>request_type</code>：请求类型标识，默认为 <code>&quot;plugin.generate&quot;</code>。</li><li><code>temperature</code>：生成内容的温度设置，影响输出的随机性。</li><li><code>max_tokens</code>：生成内容的最大token数。</li></ul><p><strong>Return：</strong></p><ul><li><code>Tuple[bool, str, str, str]</code>：返回一个元组，包含（是否成功, 生成的内容, 推理过程, 模型名称）。</li></ul><h3 id="_3-有tool情况下使用模型生成内容" tabindex="-1">3. 有Tool情况下使用模型生成内容 <a class="header-anchor" href="#_3-有tool情况下使用模型生成内容" aria-label="Permalink to “3. 有Tool情况下使用模型生成内容”">​</a></h3><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generate_with_model_with_tools</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    prompt: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model_config: TaskConfig,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tool_options: List[Dict[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Any]] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> None</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    request_type: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;plugin.generate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    temperature: Optional[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    max_tokens: Optional[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; Tuple[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, List[ToolCall] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]:</span></span></code></pre></div><p>使用指定模型生成内容，并支持工具调用。</p><p><strong>Args:</strong></p>`,21)),i("ul",null,[s[6]||(s[6]=i("li",null,[i("code",null,"prompt"),a("：提示词。")],-1)),s[7]||(s[7]=i("li",null,[i("code",null,"model_config"),a("：模型配置对象（从 "),i("code",null,"get_available_models"),a(" 获取）。")],-1)),i("li",null,[s[1]||(s[1]=i("code",null,"tool_options",-1)),s[2]||(s[2]=a("：工具选项列表，包含可用工具的配置，字典为每一个工具的定义，参见",-1)),n(t,{href:"./../tool_guide.html#属性说明"},{default:d(()=>[...s[0]||(s[0]=[a("tool-components.md",-1)])]),_:1}),s[3]||(s[3]=a("，可用",-1)),s[4]||(s[4]=i("code",null,"tool_api.get_llm_available_tool_definitions()",-1)),s[5]||(s[5]=a("获取并选择。",-1))]),s[8]||(s[8]=i("li",null,[i("code",null,"request_type"),a("：请求类型标识，默认为 "),i("code",null,'"plugin.generate"'),a("。")],-1)),s[9]||(s[9]=i("li",null,[i("code",null,"temperature"),a("：生成内容的温度设置，影响输出的随机性。")],-1)),s[10]||(s[10]=i("li",null,[i("code",null,"max_tokens"),a("：生成内容的最大token数。")],-1))]),n(e),n(h)])}const _=p(E,[["render",g]]);export{b as __pageData,_ as default};
