import{_ as i,c as a,o as n,af as l}from"./chunks/framework.Du4BpUy5.js";const c=JSON.parse('{"title":"插件Python依赖管理系统","description":"","frontmatter":{},"headers":[],"relativePath":"docs/plugins/dependency-management.md","filePath":"docs/plugins/dependency-management.md"}'),e={name:"docs/plugins/dependency-management.md"};function t(h,s,p,k,r,d){return n(),a("div",null,[...s[0]||(s[0]=[l(`<h1 id="插件python依赖管理系统" tabindex="-1">插件Python依赖管理系统 <a class="header-anchor" href="#插件python依赖管理系统" aria-label="Permalink to “插件Python依赖管理系统”">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to “概述”">​</a></h2><p>插件系统现在支持自动检查和安装Python包依赖。当插件初始化时，系统会：</p><ol><li>检查插件所需的Python包是否已安装</li><li>验证包版本是否满足要求</li><li>自动安装缺失的依赖包（可配置）</li><li>提供详细的错误信息和日志</li></ol><h2 id="配置依赖" tabindex="-1">配置依赖 <a class="header-anchor" href="#配置依赖" aria-label="Permalink to “配置依赖”">​</a></h2><h3 id="方式1-简单字符串列表-向后兼容" tabindex="-1">方式1: 简单字符串列表（向后兼容） <a class="header-anchor" href="#方式1-简单字符串列表-向后兼容" aria-label="Permalink to “方式1: 简单字符串列表（向后兼容）”">​</a></h3><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> src.plugin_system </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BasePlugin</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@register_plugin</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BasePlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 简单的字符串列表格式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    python_dependencies: List[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;requests&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;beautifulsoup4&gt;=4.9.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;httpx[socks]&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span></code></pre></div><h3 id="方式2-详细的pythondependency对象-推荐" tabindex="-1">方式2: 详细的PythonDependency对象（推荐） <a class="header-anchor" href="#方式2-详细的pythondependency对象-推荐" aria-label="Permalink to “方式2: 详细的PythonDependency对象（推荐）”">​</a></h3><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> src.plugin_system </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BasePlugin, PythonDependency</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@register_plugin</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BasePlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    python_dependencies: List[PythonDependency] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        PythonDependency(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            package_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;requests&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;=2.25.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            description</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;HTTP请求库&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            optional</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">False</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        PythonDependency(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            package_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;beautifulsoup4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;=4.9.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            description</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;HTML解析库&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            optional</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">False</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        PythonDependency(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            package_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;httpx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            install_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;httpx[socks]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装时使用的名称</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            description</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;支持SOCKS代理的HTTP客户端&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            optional</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span></code></pre></div><h2 id="pythondependency参数说明" tabindex="-1">PythonDependency参数说明 <a class="header-anchor" href="#pythondependency参数说明" aria-label="Permalink to “PythonDependency参数说明”">​</a></h2><ul><li><code>package_name</code>: 包名称（用于import检查）</li><li><code>version</code>: 版本要求，支持PEP 440格式（如 &quot;&gt;=1.0.0&quot;, &quot;==2.1.3&quot;）</li><li><code>install_name</code>: pip安装时使用的名称（如果与package_name不同）</li><li><code>description</code>: 依赖描述，用于日志和错误信息</li><li><code>optional</code>: 是否为可选依赖，可选依赖缺失不会阻止插件加载</li></ul><h2 id="全局配置" tabindex="-1">全局配置 <a class="header-anchor" href="#全局配置" aria-label="Permalink to “全局配置”">​</a></h2><p>创建 <code>mmc/config/dependency_config.toml</code> 文件来配置依赖管理行为：</p><div class="language-toml"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependency_management</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 是否启用自动安装（主开关）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">auto_install = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装超时时间（秒）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">auto_install_timeout = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 是否使用PyPI镜像源（推荐，可加速下载）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">use_mirror = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mirror_url = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://pypi.tuna.tsinghua.edu.cn/simple&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 是否使用网络代理（高级选项）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">use_proxy = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">proxy_url = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># pip安装选项</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pip_options = [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;--no-warn-script-location&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;--disable-pip-version-check&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装前是否提示用户</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">prompt_before_install = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 日志级别</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">install_log_level = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;INFO&quot;</span></span></code></pre></div><h2 id="pypi镜像源配置-推荐" tabindex="-1">PyPI镜像源配置（推荐） <a class="header-anchor" href="#pypi镜像源配置-推荐" aria-label="Permalink to “PyPI镜像源配置（推荐）”">​</a></h2><p>使用PyPI镜像源可以显著加速包的下载，特别是在中国大陆地区：</p><div class="language-toml"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependency_management</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">use_mirror = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mirror_url = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://pypi.tuna.tsinghua.edu.cn/simple&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 清华大学镜像源</span></span></code></pre></div><h3 id="常用的国内镜像源" tabindex="-1">常用的国内镜像源 <a class="header-anchor" href="#常用的国内镜像源" aria-label="Permalink to “常用的国内镜像源”">​</a></h3><div class="language-toml"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 清华大学镜像源（推荐）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mirror_url = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://pypi.tuna.tsinghua.edu.cn/simple&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 阿里云镜像源</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mirror_url = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://mirrors.aliyun.com/pypi/simple&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 中科大镜像源</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mirror_url = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://pypi.mirrors.ustc.edu.cn/simple&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 豆瓣镜像源</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mirror_url = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://pypi.douban.com/simple&quot;</span></span></code></pre></div><h2 id="网络代理配置-高级选项" tabindex="-1">网络代理配置（高级选项） <a class="header-anchor" href="#网络代理配置-高级选项" aria-label="Permalink to “网络代理配置（高级选项）”">​</a></h2><p>如果需要通过网络代理安装包，可以配置：</p><div class="language-toml"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependency_management</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">use_proxy = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">proxy_url = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://proxy.example.com:8080&quot;</span></span></code></pre></div><p><strong>注意</strong>：推荐优先使用PyPI镜像源而不是代理，镜像源通常更快更稳定。</p><h2 id="编程方式配置" tabindex="-1">编程方式配置 <a class="header-anchor" href="#编程方式配置" aria-label="Permalink to “编程方式配置”">​</a></h2><p>也可以通过代码动态配置依赖管理：</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> src.plugin_system.utils.dependency_config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> configure_dependency_settings</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 禁用自动安装</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">configure_dependency_settings(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">auto_install</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置PyPI镜像源（推荐）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">configure_dependency_settings(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    use_mirror</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    mirror_url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://pypi.tuna.tsinghua.edu.cn/simple&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置网络代理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">configure_dependency_settings(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    use_proxy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    proxy_url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://proxy.example.com:8080&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 修改超时时间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">configure_dependency_settings(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">auto_install_timeout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">600</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>注意</strong>：编程方式的配置更改不会持久化，实际配置请修改 <code>bot_config.toml</code> 文件。</p><h2 id="工作流程" tabindex="-1">工作流程 <a class="header-anchor" href="#工作流程" aria-label="Permalink to “工作流程”">​</a></h2><ol><li><strong>插件初始化</strong>: 当插件类被实例化时，系统自动检查依赖</li><li><strong>依赖标准化</strong>: 将字符串格式的依赖转换为<code>PythonDependency</code>对象</li><li><strong>检查已安装</strong>: 尝试导入每个依赖包并检查版本</li><li><strong>智能别名解析 (新增)</strong>: 如果直接导入失败 (例如 <code>import beautifulsoup4</code> 失败)，系统会查询内置的别名映射表 (例如 <code>beautifulsoup4</code> -&gt; <code>bs4</code>)，并尝试使用别名再次导入。</li><li><strong>自动安装</strong>: 如果启用，自动安装缺失的依赖</li><li><strong>错误处理</strong>: 记录详细的错误信息和安装日志</li></ol><h2 id="智能别名解析-smart-alias-resolution" tabindex="-1">智能别名解析 (Smart Alias Resolution) <a class="header-anchor" href="#智能别名解析-smart-alias-resolution" aria-label="Permalink to “智能别名解析 (Smart Alias Resolution)”">​</a></h2><p>为了提升开发体验，依赖管理系统内置了一套智能别名解析机制。</p><h3 id="解决的问题" tabindex="-1">解决的问题 <a class="header-anchor" href="#解决的问题" aria-label="Permalink to “解决的问题”">​</a></h3><p>Python生态中存在一些特殊的包，它们的<strong>安装名</strong> (在 <code>pip install</code> 中使用) 与<strong>导入名</strong> (在 <code>import</code> 语句中使用) 不一致。最典型的例子就是：</p><ul><li>安装名: <code>beautifulsoup4</code>, 导入名: <code>bs4</code></li><li>安装名: <code>Pillow</code>, 导入名: <code>PIL</code></li><li>安装名: <code>scikit-learn</code>, 导入名: <code>sklearn</code></li></ul><p>如果开发者在 <code>python_dependencies</code> 列表中使用简单的字符串格式 <code>&quot;beautifulsoup4&quot;</code>，标准的依赖检查会因为无法 <code>import beautifulsoup4</code> 而失败。</p><h3 id="工作原理" tabindex="-1">工作原理 <a class="header-anchor" href="#工作原理" aria-label="Permalink to “工作原理”">​</a></h3><p>当依赖管理器通过包名直接导入失败时，它会：</p><ol><li>查询一个内置的、包含上百个常见包的别名映射表。</li><li>如果在表中找到对应的导入名，则使用该别名再次尝试导入。</li><li>如果使用别名导入成功，则依赖检查通过，并继续进行版本验证。</li></ol><p>这个过程是自动的，旨在处理绝大多数常见情况，减少开发者手动配置的麻烦。</p><h3 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to “注意事项”">​</a></h3><ul><li><strong>最佳实践</strong>: 尽管有智能别名解析，我们仍然<strong>强烈推荐</strong>使用 <code>PythonDependency</code> 对象来明确指定 <code>package_name</code> (导入名) 和 <code>install_name</code> (安装名)，这能确保最高的准确性和可读性。</li><li><strong>覆盖范围</strong>: 内置的别名映射表涵盖了大量常用库，但无法保证100%覆盖所有情况。如果遇到别名库未收录的包，请使用 <code>PythonDependency</code> 对象进行精确定义。</li></ul><h2 id="日志输出示例" tabindex="-1">日志输出示例 <a class="header-anchor" href="#日志输出示例" aria-label="Permalink to “日志输出示例”">​</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>[Plugin:web_search_tool] 开始自动安装Python依赖: [&#39;asyncddgs&#39;, &#39;httpx[socks]&#39;]</span></span>
<span class="line"><span>[Plugin:web_search_tool] 使用PyPI镜像源: https://pypi.tuna.tsinghua.edu.cn/simple</span></span>
<span class="line"><span>[Plugin:web_search_tool] ✅ 成功安装: asyncddgs</span></span>
<span class="line"><span>[Plugin:web_search_tool] ✅ 成功安装: httpx[socks]</span></span>
<span class="line"><span>[Plugin:web_search_tool] 🎉 所有依赖安装完成</span></span>
<span class="line"><span>[Plugin:web_search_tool] Python依赖检查通过</span></span></code></pre></div><h2 id="错误处理" tabindex="-1">错误处理 <a class="header-anchor" href="#错误处理" aria-label="Permalink to “错误处理”">​</a></h2><p>当依赖检查失败时，系统会：</p><ol><li>记录详细的错误信息</li><li>如果是可选依赖缺失，仅记录警告</li><li>如果是必需依赖缺失且自动安装失败，阻止插件加载</li><li>提供清晰的解决建议</li></ol><h2 id="最佳实践" tabindex="-1">最佳实践 <a class="header-anchor" href="#最佳实践" aria-label="Permalink to “最佳实践”">​</a></h2><ol><li><strong>优先使用<code>PythonDependency</code>对象</strong>: 这是最可靠、最明确的方式，尤其是在安装名和导入名不同时。</li><li><strong>利用智能别名解析</strong>: 对于常见的、安装名与导入名不一致的包 (如 <code>beautifulsoup4</code>, <code>Pillow</code> 等)，可以直接在字符串列表里使用安装名，系统会自动解析。</li><li><strong>配置PyPI镜像源</strong>: 特别是在中国大陆地区，可显著提升下载速度。</li><li><strong>合理设置可选依赖</strong>: 避免非核心功能阻止插件加载。</li><li><strong>指定版本要求</strong>: 确保兼容性。</li><li><strong>添加描述信息</strong>: 帮助用户理解依赖的用途。</li><li><strong>测试依赖配置</strong>: 在不同环境中验证依赖是否正确。</li></ol><h2 id="安全考虑" tabindex="-1">安全考虑 <a class="header-anchor" href="#安全考虑" aria-label="Permalink to “安全考虑”">​</a></h2><ul><li>自动安装功能默认启用，但可以通过<code>auto_install=false</code>配置禁用</li><li>所有安装操作都有详细的日志记录</li><li>支持设置安装超时以避免长时间挂起</li><li>通过单一的<code>auto_install</code>开关控制所有自动安装行为</li></ul><h2 id="故障排除" tabindex="-1">故障排除 <a class="header-anchor" href="#故障排除" aria-label="Permalink to “故障排除”">​</a></h2><h3 id="依赖安装失败" tabindex="-1">依赖安装失败 <a class="header-anchor" href="#依赖安装失败" aria-label="Permalink to “依赖安装失败”">​</a></h3><ol><li><strong>优先尝试PyPI镜像源</strong>：配置国内镜像源如清华、阿里云等</li><li>检查网络连接</li><li>验证镜像源URL是否正确</li><li>如果镜像源失败，可尝试禁用镜像源或更换其他镜像源</li><li>检查代理设置（如果使用）</li><li>查看详细的错误日志</li></ol><h3 id="版本冲突" tabindex="-1">版本冲突 <a class="header-anchor" href="#版本冲突" aria-label="Permalink to “版本冲突”">​</a></h3><ol><li>检查现有包的版本</li><li>调整版本要求</li><li>考虑使用虚拟环境</li></ol><h3 id="导入错误" tabindex="-1">导入错误 <a class="header-anchor" href="#导入错误" aria-label="Permalink to “导入错误”">​</a></h3><ol><li><strong>确认包名与导入名</strong>: 检查安装名和导入名是否一致。如果不一致，推荐使用 <code>PythonDependency</code> 对象明确指定 <code>package_name</code> 和 <code>install_name</code>。</li><li><strong>利用自动别名解析</strong>: 对于常见库，系统会自动尝试解析别名。如果你的库比较冷门且名称不一致，请使用 <code>PythonDependency</code> 对象。</li><li><strong>检查可选依赖配置</strong>: 确认 <code>optional=True</code> 是否被正确设置。</li><li><strong>验证安装是否成功</strong>: 查看日志，确认 <code>pip install</code> 过程没有报错。</li></ol>`,57)])])}const g=i(e,[["render",t]]);export{c as __pageData,g as default};
