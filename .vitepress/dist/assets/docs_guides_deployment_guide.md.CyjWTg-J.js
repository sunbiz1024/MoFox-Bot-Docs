import{_ as p,I as n,c as h,o as g,a3 as e,j as s,J as t,a as l,w as a}from"./chunks/framework.Coydrlbh.js";const m=JSON.parse('{"title":"MoFox_Bot Windows 部署指南 (内置适配器版)","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guides/deployment_guide.md","filePath":"docs/guides/deployment_guide.md","lastUpdated":1758372193000}'),k={name:"docs/guides/deployment_guide.md"};function c(u,i,b,y,F,E){const o=n("VPNolebaseInlineLinkPreview"),d=n("NolebaseGitContributors"),r=n("NolebaseGitChangelog");return g(),h("div",null,[i[43]||(i[43]=e('<h1 id="mofox-bot-windows-部署指南-内置适配器版" tabindex="-1">MoFox_Bot Windows 部署指南 (内置适配器版) <a class="header-anchor" href="#mofox-bot-windows-部署指南-内置适配器版" aria-label="Permalink to “MoFox_Bot Windows 部署指南 (内置适配器版)”">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to “概述”">​</a></h2><p>欢迎使用 MoFox_Bot，一个高度可定制化的 AI Bot 框架。</p><p>本指南将引导您在 Windows 环境下，使用项目<strong>内置的 Napcat 适配器插件</strong>完成 MoFox_Bot 的全部署流程。该方式是官方推荐的最佳实践，具有以下优势：</p><ul><li><strong>部署简化</strong>：仅需下载和运行 MoFox_Bot 主项目。</li><li><strong>操作便捷</strong>：只需管理单个进程。</li><li><strong>配置统一</strong>：所有相关设置均在主项目的配置文件中完成。</li></ul><p>本教程将覆盖从环境准备到成功运行的每一个步骤，旨在为初学者提供一条清晰、高效的部署路径。</p><h2 id="第一章-准备工作——万丈高楼平地起" tabindex="-1">第一章：准备工作——万丈高楼平地起 <a class="header-anchor" href="#第一章-准备工作——万丈高楼平地起" aria-label="Permalink to “第一章：准备工作——万丈高楼平地起”">​</a></h2><p>在正式开始部署之前，我们需要先搭建好稳固的地基。请确保你的系统中已正确安装并配置了以下软件。</p><h3 id="_1-1-系统要求" tabindex="-1">1.1 系统要求 <a class="header-anchor" href="#_1-1-系统要求" aria-label="Permalink to “1.1 系统要求”">​</a></h3><ul><li><strong>操作系统</strong>: Windows 10 或 Windows 11</li></ul><h3 id="_1-2-软件三件套-python、git-与-uv" tabindex="-1">1.2 软件三件套：Python、Git 与 uv <a class="header-anchor" href="#_1-2-软件三件套-python、git-与-uv" aria-label="Permalink to “1.2 软件三件套：Python、Git 与 uv”">​</a></h3><p>这三款软件是部署流程的核心工具，缺一不可。</p><h4 id="_1-2-1-python-版本-3-10" tabindex="-1">1.2.1 Python (版本 &gt;= 3.10) <a class="header-anchor" href="#_1-2-1-python-版本-3-10" aria-label="Permalink to “1.2.1 Python (版本 &gt;= 3.10)”">​</a></h4><p>Python 是 MoFox_Bot 运行的编程语言环境。</p>',14)),s("ol",null,[s("li",null,[s("p",null,[i[1]||(i[1]=s("strong",null,"下载",-1)),i[2]||(i[2]=l(": 前往 ",-1)),t(o,{href:"https://www.python.org/downloads/",target:"_blank",rel:"noreferrer"},{default:a(()=>[...i[0]||(i[0]=[l("Python 官方网站",-1)])]),_:1}),i[3]||(i[3]=l(" 下载最新版本的 Python 安装程序。请确保下载的版本号 ",-1)),i[4]||(i[4]=s("strong",null,"大于等于 3.10",-1)),i[5]||(i[5]=l("。",-1))])]),i[6]||(i[6]=e('<li><p><strong>安装 (关键步骤)</strong>:</p><ul><li>运行下载好的安装程序。</li><li>在安装界面的最下方，<strong>务必勾选 <code>Add Python to PATH</code></strong> 选项。这会将 Python 添加到系统环境变量中，让我们可以从任何地方访问它。</li><li>点击 <code>Install Now</code>，等待安装完成。</li></ul></li><li><p><strong>验证</strong>:</p><ul><li>按下 <code>Win + R</code> 键，输入 <code>cmd</code> 并回车，打开命令提示符。</li><li>输入以下命令并回车：<div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span></code></pre></div></li><li>如果屏幕上显示出你安装的 Python 版本号（如 <code>Python 3.11.4</code>），则证明安装成功。</li></ul></li>',2))]),i[44]||(i[44]=s("h4",{id:"_1-2-2-git",tabindex:"-1"},[l("1.2.2 Git "),s("a",{class:"header-anchor",href:"#_1-2-2-git","aria-label":"Permalink to “1.2.2 Git”"},"​")],-1)),i[45]||(i[45]=s("p",null,"Git 是一个版本控制工具，我们用它来从 GitHub 上获取 MoFox_Bot 的项目代码。",-1)),s("ol",null,[s("li",null,[s("p",null,[i[8]||(i[8]=s("strong",null,"下载",-1)),i[9]||(i[9]=l(": 前往 ",-1)),t(o,{href:"https://git-scm.com/downloads",target:"_blank",rel:"noreferrer"},{default:a(()=>[...i[7]||(i[7]=[l("Git 官方网站",-1)])]),_:1}),i[10]||(i[10]=l(" 下载适用于 Windows 的安装程序。",-1))])]),i[11]||(i[11]=e('<li><p><strong>安装</strong>: 运行安装程序。安装过程中会弹出多个选项，对于初学者，<strong>保持所有选项默认，一路点击 <code>Next</code></strong> 即可。</p></li><li><p><strong>验证</strong>:</p><ul><li>同样在命令提示符中，输入以下命令并回车：<div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span></code></pre></div></li><li>如果显示出 Git 的版本号（如 <code>git version 2.41.0.windows.1</code>），则证明安装成功。</li></ul></li>',2))]),i[46]||(i[46]=e('<h4 id="_1-2-3-uv-推荐的-python-包管理器" tabindex="-1">1.2.3 uv (推荐的 Python 包管理器) <a class="header-anchor" href="#_1-2-3-uv-推荐的-python-包管理器" aria-label="Permalink to “1.2.3 uv (推荐的 Python 包管理器)”">​</a></h4><p>uv 是一个速度极快的 Python 包管理器，可以把它看作是 <code>pip</code> 和 <code>venv</code> 的“高速升级版”。我们强烈推荐使用它来管理项目依赖，能节省大量时间。</p><ol><li><strong>安装</strong>: <ul><li>在命令提示符中，输入以下命令并回车：<div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> uv</span></span></code></pre></div></li></ul></li><li><strong>验证</strong>: <ul><li>输入以下命令并回车：<div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span></code></pre></div></li><li>如果显示出 uv 的版本号，则证明安装成功。</li></ul></li></ol><h3 id="_1-3-napcat-qq-客户端" tabindex="-1">1.3 Napcat QQ 客户端 <a class="header-anchor" href="#_1-3-napcat-qq-客户端" aria-label="Permalink to “1.3 Napcat QQ 客户端”">​</a></h3><p>Napcat QQ 是一个 QQ 客户端，也是 MoFox_Bot 与 QQ 平台沟通的桥梁。</p>',5)),s("p",null,[i[15]||(i[15]=l("在继续下一步之前，请",-1)),s("strong",null,[i[13]||(i[13]=l("务必参考 ",-1)),t(o,{href:"https://napcat.napneko.icu/",target:"_blank",rel:"noreferrer"},{default:a(()=>[...i[12]||(i[12]=[l("NapCatQQ 官方文档",-1)])]),_:1}),i[14]||(i[14]=l("，完成客户端的安装、配置，并确保你的 QQ 账号能够成功登录",-1))]),i[16]||(i[16]=l("。这是整个部署流程的重要前置条件。",-1))]),i[47]||(i[47]=e(`<h2 id="第二章-获取核心——请君入瓮" tabindex="-1">第二章：获取核心——请君入瓮 <a class="header-anchor" href="#第二章-获取核心——请君入瓮" aria-label="Permalink to “第二章：获取核心——请君入瓮”">​</a></h2><p>万事俱备，现在我们正式开始请“君”入瓮——将 MoFox_Bot 的核心代码下载到你的电脑中。</p><h3 id="_2-1-创建你的-机器人基地-图形化操作" tabindex="-1">2.1 创建你的“机器人基地” (图形化操作) <a class="header-anchor" href="#_2-1-创建你的-机器人基地-图形化操作" aria-label="Permalink to “2.1 创建你的“机器人基地” (图形化操作)”">​</a></h3><p>首先，我们需要为机器人创建一个专属的“家”。</p><ol><li><strong>打开文件资源管理器</strong>：点击任务栏上的黄色文件夹图标，或者按下 <code>Win + E</code> 快捷键。</li><li><strong>选择位置</strong>：在左侧导航栏选择一个空间充裕的磁盘，比如 <code>D:</code> 盘或 <code>E:</code> 盘。</li><li><strong>新建文件夹</strong>：在空白处点击鼠标右键，选择 <code>新建</code> -&gt; <code>文件夹</code>。</li><li><strong>命名文件夹</strong>：将新文件夹命名为 <code>MoFox_Bot_Deployment</code>。</li></ol><blockquote><p><strong>⚠️ 重要提示</strong>: 为了避免未来可能出现的奇怪问题，请确保文件夹的<strong>完整路径中不包含任何中文、空格或特殊字符</strong>。例如，<code>D:\\MoFox_Bot_Deployment</code> 是一个好路径，但 <code>D:\\我的机器人 1号</code> 则不推荐。</p></blockquote><h3 id="_2-2-git-clone-神威" tabindex="-1">2.2 <code>git clone</code> 神威 <a class="header-anchor" href="#_2-2-git-clone-神威" aria-label="Permalink to “2.2 git clone 神威”">​</a></h3><p>现在，我们需要在这个“基地”里打开命令行，来执行代码下载命令。</p><ol><li><p><strong>快速打开命令行</strong>:</p><ul><li>双击进入你刚刚创建的 <code>MoFox_Bot_Deployment</code> 文件夹。</li><li>点击文件资源管理器顶部的<strong>地址栏</strong>。</li><li>删除地址栏里原来的路径，输入 <code>cmd</code>，然后按下<strong>回车键</strong>。</li><li>这时，一个黑色的命令提示符窗口会弹出，并且它的路径已经自动定位到了你的“机器人基地”里。</li></ul></li><li><p><strong>执行克隆命令</strong>:</p><ul><li>在弹出的命令提示符窗口中，粘贴并执行以下命令：<div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/MoFox-Studio/MoFox_Bot.git</span></span></code></pre></div></li></ul></li></ol><blockquote><p><strong>🌐 网络小贴士</strong>: 如果你发现下载速度极慢或连接失败，这通常是由于网络问题。可以尝试使用以下备用镜像地址：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 备用地址1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://kgithub.com/MoFox-Studio/MoFox_Bot.git</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 备用地址2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://xget.xi-xu.me/gh/MoFox-Studio/MoFox_Bot.git</span></span></code></pre></div></blockquote><p>执行命令后，Git 会开始下载项目文件。当进度条走完，命令行界面不再滚动时，就代表克隆完成了。</p><p>此时，回到你的文件资源管理器，会发现 <code>MoFox_Bot_Deployment</code> 文件夹里多出了一个名为 <code>MoFox_Bot</code> 的新文件夹。恭喜，你已经成功获取了机器人的“素体”！</p><h2 id="第三章-激活环境——注入灵魂" tabindex="-1">第三章：激活环境——注入灵魂 <a class="header-anchor" href="#第三章-激活环境——注入灵魂" aria-label="Permalink to “第三章：激活环境——注入灵魂”">​</a></h2><p>我们已经有了机器人的“素体”（项目代码），现在需要为它创建一个纯净的生存空间，并注入“灵魂”——安装所有必需的程序库。</p><h3 id="_3-1-虚拟环境-干净又卫生" tabindex="-1">3.1 虚拟环境：干净又卫生 <a class="header-anchor" href="#_3-1-虚拟环境-干净又卫生" aria-label="Permalink to “3.1 虚拟环境：干净又卫生”">​</a></h3><p>在安装程序库之前，我们要先创建一个“虚拟环境”。</p><p>你可以把它想象成一个<strong>专属工具箱</strong>。我们为 MoFox_Bot 项目创建一个独立的、与外界隔离的工具箱，所有它需要的工具（程序库）都放在这个箱子里。这样做的好处是：</p><ul><li><strong>避免冲突</strong>：不会和你电脑上安装的其他 Python 程序产生冲突。</li><li><strong>保持纯净</strong>：保证了项目环境的干净和稳定。</li><li><strong>方便管理</strong>：日后删除整个项目时，直接把这个工具箱（文件夹）删掉就行，不会留下任何垃圾。</li></ul><p>这是 Python 开发的最佳实践，也是我们强烈推荐的做法。</p><h3 id="_3-2-uv-的魔法时刻" tabindex="-1">3.2 <code>uv</code> 的魔法时刻 <a class="header-anchor" href="#_3-2-uv-的魔法时刻" aria-label="Permalink to “3.2 uv 的魔法时刻”">​</a></h3><p>接下来，我们将使用 <code>uv</code> 这个神器来完成环境的创建和激活。</p><ol><li><p><strong>进入项目目录</strong>:</p><ul><li>首先，确保你的命令行终端还开着，并且路径在 <code>MoFox_Bot_Deployment</code> 文件夹下。</li><li>我们需要进入刚刚克隆下来的 <code>MoFox_Bot</code> 文件夹。执行以下命令：<div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MoFox_Bot</span></span></code></pre></div></li></ul></li><li><p><strong>创建虚拟环境</strong>:</p><ul><li>执行以下命令来创建工具箱：<div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> venv</span></span></code></pre></div></li><li>命令执行后，你会发现 <code>MoFox_Bot</code> 文件夹里多出了一个名为 <code>.venv</code> 的新文件夹。这就是我们的“专属工具箱”。</li></ul></li><li><p><strong>激活虚拟环境 (核心步骤)</strong>:</p><ul><li><p>光有工具箱还不行，我们得把它“打开”，这样后续的命令才能使用里面的工具。这个“打开”的动作，就叫做“激活”。</p></li><li><p><strong>根据你使用的终端类型，选择对应的激活命令</strong>：</p><ul><li><p><strong>如果你使用的是 <code>cmd</code> (传统命令提示符)</strong>:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.venv\\Scripts\\activate</span></span></code></pre></div></li><li><p><strong>如果你使用的是 <code>PowerShell</code> (Windows Terminal 或 VS Code 默认终端)</strong>:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.venv\\Scripts\\Activate.ps1</span></span></code></pre></div></li></ul></li><li><p><strong>观察变化！</strong> 成功激活后，你会看到命令行提示符的最前面，多出了一个 <code>(.venv)</code> 的标记。这表示你已经成功进入了 MoFox_Bot 的专属环境。</p></li></ul><blockquote><p><strong>⚠️ PowerShell 用户注意</strong>: 如果你在 PowerShell 中执行激活命令失败，并看到红色错误提示，很可能是因为系统禁止执行脚本。请执行以下命令来临时解除限制，然后再重新尝试激活：</p><div class="language-powershell"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Set-ExecutionPolicy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Scope </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Process</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ExecutionPolicy Bypass</span></span></code></pre></div><p>这条命令只在当前窗口生效，是安全的。</p></blockquote><blockquote><p><strong>⚠️ 重要提示</strong>: 之后所有的安装、运行操作，都<strong>必须</strong>在这个带有 <code>(.venv)</code> 标记的命令行窗口中进行。如果某天你关闭了窗口，下次想继续操作时，需要重新进入项目文件夹并执行对应的 <code>activate</code> 命令来激活环境。</p></blockquote></li></ol><h3 id="_3-3-依赖安装-一行代码搞定" tabindex="-1">3.3 依赖安装：一行代码搞定 <a class="header-anchor" href="#_3-3-依赖安装-一行代码搞定" aria-label="Permalink to “3.3 依赖安装：一行代码搞定”">​</a></h3><p>环境激活好了，现在我们可以开始安装 MoFox_Bot 所需的所有程序库了。项目文件夹里的 <code>requirements.txt</code> 文件，就是一张详细的“购物清单”。</p><ul><li><p>在<strong>已激活虚拟环境</strong>的命令行窗口中，执行以下命令：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requirements.txt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://mirrors.aliyun.com/pypi/simple</span></span></code></pre></div></li><li><p><strong>命令解析</strong>:</p><ul><li><code>uv pip install</code>: 使用 uv 来安装包。</li><li><code>-r requirements.txt</code>: <code>-r</code> 表示 read，即读取“购物清单”文件。</li><li><code>-i https://...</code>: <code>-i</code> 表示 index，即指定从哪个“商店”下载。这里我们使用了阿里云的镜像源，可以极大地提高国内用户的下载速度。</li></ul></li></ul><p>命令执行后，你会看到屏幕上开始飞速滚动各种下载和安装信息。请耐心等待，直到它全部完成，并重新出现可以输入命令的提示符。</p>`,26)),s("blockquote",null,[i[25]||(i[25]=s("p",null,[s("strong",null,"💡 依赖安装失败怎么办？"),l(" 如果安装过程中出现大量红色错误，不要慌，通常是以下几个原因：")],-1)),s("ol",null,[i[23]||(i[23]=s("li",null,[s("strong",null,"网络问题"),l("：检查你的网络连接。虽然我们已经指定了国内镜像，但偶尔网络波动也可能导致失败。可以尝试重新执行一遍安装命令。")],-1)),s("li",null,[i[18]||(i[18]=s("strong",null,"缺少编译环境",-1)),i[19]||(i[19]=l("：某些库需要编译才能安装。如果你看到错误信息中包含 ",-1)),i[20]||(i[20]=s("code",null,"Microsoft Visual C++",-1)),i[21]||(i[21]=l(" 等字样，说明缺少编译工具。可以访问 ",-1)),t(o,{href:"https://visualstudio.microsoft.com/zh-hans/visual-cpp-build-tools/",target:"_blank",rel:"noreferrer"},{default:a(()=>[...i[17]||(i[17]=[l("Visual Studio 官网",-1)])]),_:1}),i[22]||(i[22]=l(' 下载并安装 "Visual Studio 生成工具" (Build Tools)。',-1))]),i[24]||(i[24]=s("li",null,[s("strong",null,"权限不足"),l("：尝试关闭当前的命令行窗口，然后"),s("strong",null,"以管理员身份"),l("重新打开一个新的终端，再进入项目目录、激活环境、执行安装命令。")],-1))])]),i[48]||(i[48]=e(`<p>至此，机器人的“灵魂”已经注入完毕。它所需的一切软件依赖都已准备就绪！</p><h2 id="第四章-核心配置——让机器人-认识-你" tabindex="-1">第四章：核心配置——让机器人“认识”你 <a class="header-anchor" href="#第四章-核心配置——让机器人-认识-你" aria-label="Permalink to “第四章：核心配置——让机器人“认识”你”">​</a></h2><p>环境和依赖都已就绪，现在到了最激动人心的环节——通过修改配置文件，赋予机器人身份和智慧。</p><blockquote><p><strong>🔧 编辑器推荐</strong>: 为了避免不必要的格式或编码错误，强烈建议使用专业的代码编辑器来修改配置文件，例如 <strong>Visual Studio Code</strong>、<strong>Notepad++</strong> 或 <strong>Sublime Text</strong>。请<strong>不要</strong>使用 Windows 自带的“记事本”。</p></blockquote><p>在本章，我们只修改三个最核心的文件，以保证机器人能顺利启动并响应。所有配置文件都可以在 <code>MoFox_Bot</code> 文件夹内的 <code>template</code> 文件夹中找到模板。</p><h3 id="_4-1-env-文件-最初的约定" tabindex="-1">4.1 <code>.env</code> 文件：最初的约定 <a class="header-anchor" href="#_4-1-env-文件-最初的约定" aria-label="Permalink to “4.1 .env 文件：最初的约定”">​</a></h3><p>这个文件负责最基础的环境变量设置。</p><ol><li><p><strong>定位与复制</strong>:</p><ul><li>在 <code>MoFox_Bot</code> 文件夹中，找到 <code>template</code> 文件夹。</li><li>将里面的 <code>template.env</code> 文件复制到 <code>MoFox_Bot</code> 文件夹的<strong>根目录</strong>。</li><li>将复制出来的新文件重命名为 <code>.env</code> (注意，前面有一个点)。</li></ul></li><li><p><strong>修改内容</strong>:</p><ul><li>用编辑器打开 <code>.env</code> 文件。</li><li>找到 <code>EULA_CONFIRMED=false</code> 这一行，将 <code>false</code> 修改为 <code>true</code>。这代表你同意并遵守项目的用户许可协议。<div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>EULA_CONFIRMED=true</span></span></code></pre></div></li><li>文件中的 <code>HOST</code> 和 <code>PORT</code> 选项通常保持默认 (<code>127.0.0.1</code> 和 <code>8000</code>) 即可，暂时无需修改。</li></ul></li></ol><h3 id="_4-2-bot-config-toml-机器人的-身份证" tabindex="-1">4.2 <code>bot_config.toml</code>：机器人的“身份证” <a class="header-anchor" href="#_4-2-bot-config-toml-机器人的-身份证" aria-label="Permalink to “4.2 bot_config.toml：机器人的“身份证””">​</a></h3><p>这个文件定义了机器人的基本身份信息和主人。</p><ol><li><p><strong>定位与复制</strong>:</p><ul><li>进入 <code>MoFox_Bot/template</code> 文件夹。</li><li>将 <code>bot_config_template.toml</code> 文件复制到 <code>MoFox_Bot/config</code> 文件夹中。</li><li>将复制到 <code>config</code> 文件夹里的新文件重命名为 <code>bot_config.toml</code>。</li></ul></li><li><p><strong>修改内容 (至少修改以下两项)</strong>:</p><ul><li>用编辑器打开 <code>config/bot_config.toml</code> 文件。</li><li><strong>机器人 QQ 号</strong>: 找到 <code>[bot]</code> 配置节下的 <code>qq_account</code>，将其值修改为你准备用于运行机器人的 QQ 号。<div class="language-toml"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">platform = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;qq&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">qq_account = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123456789</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # &lt;--- 修改这里</span></span></code></pre></div></li><li><strong>主人 QQ 号</strong>: 找到 <code>[permission]</code> 配置节下的 <code>master_users</code>，将其配置为你的 QQ 号。 <blockquote><p><strong>⚠️ 格式注意</strong>: 请严格按照 <code>[[&quot;platform&quot;, &quot;user_id&quot;]]</code> 的格式填写，注意<strong>双层方括号</strong>和<strong>英文引号</strong>。</p></blockquote><div class="language-toml"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">permission</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">master_users = [[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;qq&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;987654321&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># &lt;--- 修改这里的QQ号</span></span></code></pre></div></li></ul></li></ol><h3 id="_4-3-model-config-toml-机器人的-大脑" tabindex="-1">4.3 <code>model_config.toml</code>：机器人的“大脑” <a class="header-anchor" href="#_4-3-model-config-toml-机器人的-大脑" aria-label="Permalink to “4.3 model_config.toml：机器人的“大脑””">​</a></h3><p>这个文件用于配置机器人使用的大语言模型（LLM），是机器人能否思考和回答问题的关键。</p>`,13)),s("ol",null,[i[37]||(i[37]=e("<li><p><strong>定位与复制</strong>:</p><ul><li>同样，从 <code>MoFox_Bot/template</code> 文件夹中，将 <code>model_config_template.toml</code> 文件复制到 <code>MoFox_Bot/config</code> 文件夹。</li><li>将其重命名为 <code>model_config.toml</code>。</li></ul></li>",1)),s("li",null,[i[36]||(i[36]=s("p",null,[s("strong",null,"进行配置 (关键步骤)"),l(":")],-1)),s("ul",null,[i[35]||(i[35]=s("li",null,"为了让机器人能够开口说话，你必须至少配置一个可用的大语言模型服务。",-1)),s("li",null,[i[27]||(i[27]=l("我们已经为您准备了一份专门的快速上手指南，请",-1)),i[28]||(i[28]=s("strong",null,"点击并参照以下链接",-1)),i[29]||(i[29]=l("完成模型配置： ",-1)),s("ul",null,[s("li",null,[s("strong",null,[t(o,{href:"./quick_start_model_config.html"},{default:a(()=>[...i[26]||(i[26]=[l("模型配置快速上手指南",-1)])]),_:1})])])])]),s("li",null,[i[31]||(i[31]=l("对于初次部署的用户，",-1)),i[32]||(i[32]=s("strong",null,"只需完成上述快速上手指南中的步骤即可",-1)),i[33]||(i[33]=l("。更详细和高级的模型配置方法，可以在机器人成功运行后，再参考 ",-1)),t(o,{href:"./model_configuration_guide.html"},{default:a(()=>[...i[30]||(i[30]=[l("模型配置进阶指南",-1)])]),_:1}),i[34]||(i[34]=l("。",-1))])])])]),i[49]||(i[49]=e(`<h2 id="第五章-连接世界——内置适配器插件配置" tabindex="-1">第五章：连接世界——内置适配器插件配置 <a class="header-anchor" href="#第五章-连接世界——内置适配器插件配置" aria-label="Permalink to “第五章：连接世界——内置适配器插件配置”">​</a></h2><p>现在，机器人的“身份证”和“大脑”都有了，但它还活在自己的世界里。我们需要为它接上“神经”，让它能够连接到 QQ 平台，接收和发送消息。这一步，我们通过配置官方内置的 <strong>Napcat 适配器插件</strong>来完成。</p><h3 id="_5-1-生成插件配置文件" tabindex="-1">5.1 生成插件配置文件 <a class="header-anchor" href="#_5-1-生成插件配置文件" aria-label="Permalink to “5.1 生成插件配置文件”">​</a></h3><p>MoFox_Bot 拥有强大的插件管理系统。在我们第一次启动程序时，它会自动检测所有内置插件，并为它们创建默认的配置文件。</p><ol><li><p><strong>首次启动</strong>:</p><ul><li>确保你的命令行终端<strong>已激活虚拟环境</strong> (前面带有 <code>(.venv)</code> 标记)。</li><li>确保你当前的目录是 <code>MoFox_Bot</code> 文件夹。</li><li>执行以下命令，来启动一次 MoFox_Bot：<div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bot.py</span></span></code></pre></div></li><li>程序启动后，你会看到大量的日志信息在屏幕上滚动。当日志滚动停止，并且没有新的信息出现时，说明程序已经完成了初始化工作。</li></ul><blockquote><p><strong>💡 第一次启动就失败了怎么办？</strong> 如果程序在启动过程中直接报错并退出了，<strong>99% 的可能性是第四章的核心配置有误</strong>。请回头仔细检查：</p><ul><li><code>.env</code> 文件中的 <code>EULA_CONFIRMED</code> 是否为 <code>true</code>？</li><li><code>bot_config.toml</code> 中的 <code>qq_account</code> 和 <code>master_users</code> 是否已正确填写？</li><li><code>model_config.toml</code> 中是否至少配置好了一个<strong>可用</strong>的 API Key？ 解决了这些问题后，再重新尝试启动。</li></ul></blockquote></li><li><p><strong>生成配置并关闭</strong>:</p><ul><li>当程序稳定运行后，这次启动的主要目的——生成配置文件——就已经达成了。现在，请在命令行窗口中，按下 <code>Ctrl + C</code> 来关闭程序。程序会进行“优雅关闭”，请稍等片刻直至其完全退出。</li></ul></li></ol><h3 id="_5-2-启用并配置插件" tabindex="-1">5.2 启用并配置插件 <a class="header-anchor" href="#_5-2-启用并配置插件" aria-label="Permalink to “5.2 启用并配置插件”">​</a></h3><p>经过上一步，所有内置插件的默认配置文件都已经被自动创建好了。</p><ol><li><p><strong>找到配置文件</strong>:</p><ul><li>现在，请打开 <code>MoFox_Bot/config/plugins/</code> 文件夹。你会发现里面出现了很多以插件名命名的文件夹。</li><li>这说明 MoFox_Bot 的所有内置插件（如权限管理、戳一戳、Web搜索等）的配置文件都在这里生成了，方便你未来探索和开启更多功能。</li><li>我们当前的目标是找到 <code>napcat_adapter_plugin</code> 文件夹，进入后用你的代码编辑器打开 <code>config.toml</code> 文件。</li></ul></li><li><p><strong>启用插件 (第一步)</strong>:</p><ul><li>在打开的 <code>config.toml</code> 文件中，找到 <code>[plugin]</code> 配置节，将 <code>enabled</code> 的值从 <code>false</code> 修改为 <code>true</code>。这是启动适配器的总开关。<div class="language-toml"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">enabled = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # &lt; 修改这里</span></span></code></pre></div></li></ul></li><li><p><strong>配置 Napcat 连接 (核心)</strong>:</p><ul><li>找到 <code>[napcat_server]</code> 配置节。</li><li>确认 <code>port</code> 的值（默认为 <code>8095</code>）与你在 <strong>Napcat QQ 客户端</strong>的 <code>OneBot v11</code> 设置中，添加的<strong>反向 WebSocket</strong> 地址中的端口号<strong>完全一致</strong>。</li><li>如果不一致，请修改此处的 <code>port</code> 值，使其与 Napcat 客户端的设置保持统一。</li></ul><blockquote><p><strong>示例</strong>: 如果你在 Napcat 客户端中设置的 URL 是 <code>ws://127.0.0.1:12345</code>，那么这里的 <code>port</code> 就应该修改为 <code>12345</code>。</p></blockquote></li><li><p><strong>检查内部服务连接</strong>:</p><ul><li>找到 <code>[maibot_server]</code> 配置节。</li><li>确认 <code>port</code> 的值（默认为 <code>8000</code>）与你在 <code>MoFox_Bot</code> 根目录下的 <code>.env</code> 文件中设置的 <code>PORT</code> 值一致。通常情况下，两者默认都是 <code>8000</code>，无需修改。</li></ul></li></ol><p>完成以上步骤，机器人的“神经系统”就已经成功搭建。它现在知道了该如何与 QQ 世界进行通信。</p><h2 id="第六章-启动-——见证奇迹的时刻" tabindex="-1">第六章：启动！——见证奇迹的时刻 <a class="header-anchor" href="#第六章-启动-——见证奇迹的时刻" aria-label="Permalink to “第六章：启动！——见证奇迹的时刻”">​</a></h2><p>所有准备工作和配置都已完成，现在，是时候唤醒你的机器人了！</p><h3 id="_6-1-启动顺序" tabindex="-1">6.1 启动顺序 <a class="header-anchor" href="#_6-1-启动顺序" aria-label="Permalink to “6.1 启动顺序”">​</a></h3><p>请严格按照以下顺序来启动各个组件。</p><ol><li><p><strong>第一步：启动并登录 Napcat QQ</strong></p><ul><li>打开你已经安装好的 Napcat QQ 客户端。</li><li>确保你的机器人 QQ 账号已经<strong>成功登录</strong>，并且客户端处于正常运行状态。</li></ul></li><li><p><strong>第二步：运行 MoFox_Bot</strong></p><ul><li>回到你的命令行终端窗口。</li><li><strong>检查两件事</strong>: <ol><li>确认命令行提示符最左边有 <code>(.venv)</code> 标记，代表虚拟环境已激活。</li><li>确认当前路径在 <code>MoFox_Bot</code> 文件夹内。</li></ol></li><li>执行最终的启动命令：<div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bot.py</span></span></code></pre></div></li></ul></li></ol><blockquote><p><strong>⚠️ 重要提示</strong>: 这个命令行窗口就是机器人的“生命维持系统”。<strong>请不要关闭它</strong>，最小化即可。一旦关闭，机器人就会下线。</p></blockquote><h3 id="_6-2-观察日志-判断成功" tabindex="-1">6.2 观察日志，判断成功 <a class="header-anchor" href="#_6-2-观察日志-判断成功" aria-label="Permalink to “6.2 观察日志，判断成功”">​</a></h3><p>程序运行后，日志会开始在命令行窗口中滚动。学会看日志，是判断机器人状态的关键。</p><p>当你看到类似以下几条关键信息时，就代表你的机器人已经成功启动并连接到了 QQ 平台：</p><div class="language-log"><button title="Copy Code" class="copy"></button><span class="lang">log</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># ... (其他日志)</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">INFO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:     Uvicorn running on </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">http://127.0.0.1:8000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Press CTRL+C to quit) # MoFox_Bot 内部服务启动</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napcat_adapter - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">INFO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> - 正在启动 adapter，连接模式: reverse</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napcat_adapter - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">INFO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> - WebSocket server is listening on localhost:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8095</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> # 适配器服务器在指定端口监听</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napcat_adapter - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">INFO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> - Napcat client connected from ... # Napcat 客户端已成功连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napcat_adapter - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">INFO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> - MaiBot router连接已建立 # 适配器与 MoFox_Bot 内核连接成功</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">main - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">INFO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> - MoFox_Bot 初始化完成 # 主程序加载完成</span></span></code></pre></div><blockquote><p><strong>💡 日志解读</strong>:</p><ul><li>日志中的端口号（如 <code>8095</code>）会根据你的配置而变化。</li><li>看到 <code>Napcat client connected</code> 是最关键的一步，它标志着机器人与 QQ 的“神经连接”已打通。</li></ul></blockquote><h3 id="_6-3-测试机器人" tabindex="-1">6.3 测试机器人 <a class="header-anchor" href="#_6-3-测试机器人" aria-label="Permalink to “6.3 测试机器人”">​</a></h3><p>现在，打开你的 QQ，向你的机器人账号发送一条消息，或者在一个它所在的群里 <code>@它</code>。</p><p>如果它回复了你，那么……</p><p><strong>恭喜你，部署成功！你的第一个 AI Bot 已经正式诞生！</strong></p><h2 id="第七章-故障排除" tabindex="-1">第七章：故障排除 <a class="header-anchor" href="#第七章-故障排除" aria-label="Permalink to “第七章：故障排除”">​</a></h2><p>当机器人没有按照预期工作时，请不要灰心。99% 的问题都可以通过仔细检查配置和日志来解决。</p><details><summary><b>Q1: 启动成功，但日志里迟迟没有 \`Napcat client connected\` 信息？</b></summary><p>这通常意味着 MoFox_Bot 和 Napcat QQ 客户端之间的“神经”没有接上。请按以下步骤排查：</p><ol><li><strong>检查 Napcat QQ</strong>: 确保 Napcat QQ 客户端本身已成功登录并处于在线状态。</li><li><strong>检查端口号</strong>: 这是最常见的原因。请再次核对 <code>config/plugins/napcat_adapter_plugin/config.toml</code> 文件中 <code>[napcat_server]</code> 下的 <code>port</code> 值，是否与你 Napcat QQ 客户端里设置的<strong>反向 WebSocket 端口</strong>完全一致。</li><li><strong>检查防火墙</strong>: 确保 Windows 防火墙或任何第三方杀毒软件没有阻止 MoFox_Bot 的网络连接。可以尝试暂时关闭防火墙进行测试。</li><li><strong>检查 IP 地址</strong>: 确保 <code>config.toml</code> 中的 <code>host</code> (<code>localhost</code>) 和 Napcat 中的 IP (<code>127.0.0.1</code>) 是匹配的。通常保持默认即可。</li></ol></details><details><summary><b>Q2: 机器人成功连接，但在 QQ 里 @它 或私聊它，它不回复？</b></summary><p>这通常是配置问题或模型服务问题。</p><ol><li><strong>检查 Napcat QQ</strong>: 确保 Napcat QQ 客户端本身已成功登录并处于在线状态。</li><li><strong>检查模型配置</strong>: 确认 <code>config/model_config.toml</code> 里的 API Key 是<strong>有效且可用</strong>的。可以检查一下你的模型服务商后台，看看 Key 是否填错、账户是否欠费。</li><li><strong>检查白名单</strong>: 检查 <code>config/plugins/napcat_adapter_plugin/config.toml</code> 文件中 <code>[features]</code> 部分的 <code>group_list</code> 和 <code>private_list</code>。如果你开启了白名单，请确保你测试的群聊或私聊已经被加了进去。</li><li><strong>查看日志</strong>: 观察机器人后台的命令行窗口。当你给机器人发消息时，看看日志是否刷新。如果有 <code>ERROR</code> 级别的红色错误信息，通常能定位到问题所在。</li></ol></details><details><summary><b>Q3: 日志里出现关于 \`API KEY\`、\`authentication\` 或 \`401\` 的错误？</b></summary><p>这个错误非常明确，就是你的大语言模型配置出了问题。</p><ul><li>请打开 <code>config/model_config.toml</code> 文件，仔细检查你配置的 <code>api_key</code> 和 <code>base_url</code> 是否有误。</li><li>登录你的模型服务商网站，检查 Key 是否被禁用、账户是否到期或欠费。</li></ul></details><details><summary><b>Q4: 我修改了配置文件，但好像没有生效？</b></summary><p>MoFox_Bot 在启动时会加载所有配置文件。如果你在机器人运行中修改了配置，需要<strong>重启</strong>才能生效。</p><ul><li>请在命令行窗口中，按下 <code>Ctrl + C</code> 关闭机器人。</li><li>待程序完全退出后，再重新执行 <code>uv run python bot.py</code> 命令来启动机器人。</li></ul></details><h2 id="结语-你的冒险才刚刚开始" tabindex="-1">结语：你的冒险才刚刚开始 <a class="header-anchor" href="#结语-你的冒险才刚刚开始" aria-label="Permalink to “结语：你的冒险才刚刚开始”">​</a></h2><p>至此，你已经成功走完了 MoFox_Bot 的部署全程，并拥有了一个属于自己的、能够思考和对话的 AI 伙伴。恭喜你！</p><p>但这仅仅是一个开始。本指南带你完成的，是让机器人“活过来”的最小化配置。MoFox_Bot 的真正魅力，在于其强大的可塑性和扩展性。你可以像搭乐高一样，通过调整配置文件，来塑造它的性格、学习它的表达、开启或关闭它的各项功能（如画图、Web搜索、记忆系统等）。</p><p>当你想进一步探索时，我们推荐你阅读以下文档：</p>`,34)),s("ul",null,[s("li",null,[s("strong",null,[t(o,{href:"./bot_config_guide.html"},{default:a(()=>[...i[38]||(i[38]=[l("机器人人格详细配置指南",-1)])]),_:1})]),i[39]||(i[39]=l(": 深入了解如何塑造机器人的性格、说话风格和行为模式。",-1))]),s("li",null,[s("strong",null,[t(o,{href:"./model_configuration_guide.html"},{default:a(()=>[...i[40]||(i[40]=[l("模型配置进阶指南",-1)])]),_:1})]),i[41]||(i[41]=l(": 学习如何配置多个模型、本地模型以及更复杂的调用策略。",-1))]),i[42]||(i[42]=s("li",null,[s("strong",null,"插件系统"),l(": MoFox_Bot 的所有功能都由插件实现。你可以通过 "),s("code",null,"config/plugins/"),l(" 目录下的配置文件，来探索和启用更多有趣的内置功能。")],-1))]),i[50]||(i[50]=s("p",null,"如果你在探索的路上遇到了任何无法解决的难题，欢迎通过项目的 GitHub Issues 或社区与其他开发者交流。",-1)),i[51]||(i[51]=s("p",null,"现在，去和你的新伙伴聊天吧！",-1)),t(d),t(r)])}const f=p(k,[["render",c]]);export{m as __pageData,f as default};
