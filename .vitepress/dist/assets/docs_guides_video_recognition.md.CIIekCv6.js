import{_ as p,I as o,c as h,o as k,j as s,a3 as e,J as t,a as l,w as n}from"./chunks/framework.Coydrlbh.js";const y=JSON.parse('{"title":"视频识别功能 (由 Ink-Fox 强力驱动)","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guides/video_recognition.md","filePath":"docs/guides/video_recognition.md","lastUpdated":1758617256000}'),g={name:"docs/guides/video_recognition.md"};function u(c,i,b,f,m,F){const a=o("VPNolebaseInlineLinkPreview"),d=o("NolebaseGitContributors"),r=o("NolebaseGitChangelog");return k(),h("div",null,[i[19]||(i[19]=s("h1",{id:"视频识别功能-由-ink-fox-强力驱动",tabindex:"-1"},[l("视频识别功能 (由 Ink-Fox 强力驱动) "),s("a",{class:"header-anchor",href:"#视频识别功能-由-ink-fox-强力驱动","aria-label":"Permalink to “视频识别功能 (由 Ink-Fox 强力驱动)”"},"​")],-1)),i[20]||(i[20]=s("h2",{id:"功能概述",tabindex:"-1"},[l("功能概述 "),s("a",{class:"header-anchor",href:"#功能概述","aria-label":"Permalink to “功能概述”"},"​")],-1)),s("p",null,[i[1]||(i[1]=l("我们的视频识别功能现在已经独立为一个高性能的 Rust & Python 混合项目 ",-1)),t(a,{href:"https://github.com/MoFox-Studio/inkfox",target:"_blank",rel:"noreferrer"},{default:n(()=>[...i[0]||(i[0]=[l("Ink-Fox",-1)])]),_:1}),i[2]||(i[2]=l(" 啦. 这样不仅性能更强, 安装和更新也更方便了呢.",-1))]),i[21]||(i[21]=e('<p>该功能允许机器人分析用户发送的视频（也可以分析B站视频哦），并以文本形式描述视频内容，从而实现机器人看视频的功能。</p><h2 id="安装与配置" tabindex="-1">安装与配置 <a class="header-anchor" href="#安装与配置" aria-label="Permalink to “安装与配置”">​</a></h2><h3 id="步骤一-安装-ink-fox" tabindex="-1">步骤一: 安装 Ink-Fox <a class="header-anchor" href="#步骤一-安装-ink-fox" aria-label="Permalink to “步骤一: 安装 Ink-Fox”">​</a></h3><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>如果您是一键包用户, <code>Ink-Fox</code> 已经为您预装好了, 无需进行任何操作, 请直接跳至 <strong>步骤三</strong>。</p></div><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p>Ink-Fox 需要 Python 3.11 或更高版本。</p></div><p>对于手动部署的用户, 我们推荐使用 <code>pip</code> 进行自动安装。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> inkfox</span></span></code></pre></div><h4 id="手动编译-适合开发者" tabindex="-1">手动编译 (适合开发者) <a class="header-anchor" href="#手动编译-适合开发者" aria-label="Permalink to “手动编译 (适合开发者)”">​</a></h4><p>如果你想自己动手编译, 或者想为 <code>Ink-Fox</code> 贡献代码, 可以按照下面的步骤来:</p>',9)),s("ol",null,[i[7]||(i[7]=e(`<li><p><strong>克隆仓库</strong>:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/MoFox-Studio/inkfox.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> inkfox</span></span></code></pre></div></li>`,1)),s("li",null,[s("p",null,[i[4]||(i[4]=s("strong",null,"安装 Rust 环境",-1)),i[5]||(i[5]=l(": 如果您尚未安装 Rust, 请访问 ",-1)),t(a,{href:"https://www.rust-lang.org/tools/install",target:"_blank",rel:"noreferrer"},{default:n(()=>[...i[3]||(i[3]=[l("https://www.rust-lang.org/tools/install",-1)])]),_:1}),i[6]||(i[6]=l(" 并按照说明进行安装。",-1))])]),i[8]||(i[8]=e('<li><p><strong>安装 Maturin</strong>: Maturin 是一个用于构建和发布 Rust-Python 包的工具。通过 pip 安装：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> maturin</span></span></code></pre></div></li><li><p><strong>编译和安装</strong>:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">maturin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> develop</span></span></code></pre></div><p>此命令将在您的 Python 环境中编译并安装 <code>inkfox</code> 模块。</p></li>',2))]),i[22]||(i[22]=s("h3",{id:"步骤二-配置-ffmpeg",tabindex:"-1"},[l("步骤二: 配置 FFmpeg "),s("a",{class:"header-anchor",href:"#步骤二-配置-ffmpeg","aria-label":"Permalink to “步骤二: 配置 FFmpeg”"},"​")],-1)),i[23]||(i[23]=s("div",{class:"tip custom-block github-alert"},[s("p",{class:"custom-block-title"},"TIP"),s("p",null,"一键包用户也无需关心此项, 我们已经为您配置妥当。")],-1)),i[24]||(i[24]=s("p",null,[s("code",null,"Ink-Fox"),l(" 依然需要 FFmpeg 来作为视频处理的基石。")],-1)),s("ul",null,[s("li",null,[i[17]||(i[17]=s("p",null,[s("strong",null,"下载 FFmpeg"),l(":")],-1)),s("ul",null,[s("li",null,[i[10]||(i[10]=s("strong",null,"Windows",-1)),i[11]||(i[11]=l(": 访问 ",-1)),t(a,{href:"https://www.gyan.dev/ffmpeg/builds/",target:"_blank",rel:"noreferrer"},{default:n(()=>[...i[9]||(i[9]=[l("https://www.gyan.dev/ffmpeg/builds/",-1)])]),_:1}),i[12]||(i[12]=l(" 并下载最新的 ",-1)),i[13]||(i[13]=s("code",null,"essentials",-1)),i[14]||(i[14]=l(" 版本。",-1))]),i[15]||(i[15]=s("li",null,[s("strong",null,"macOS"),l(": 使用 Homebrew 安装："),s("code",null,"brew install ffmpeg")],-1)),i[16]||(i[16]=s("li",null,[s("strong",null,"Linux"),l(": 使用您的包管理器安装，例如在 Ubuntu 上："),s("code",null,"sudo apt update && sudo apt install ffmpeg")],-1))])]),i[18]||(i[18]=e('<li><p><strong>配置路径</strong>: 解压下载的文件，并将 <code>bin</code> 目录下的 <code>ffmpeg.exe</code> (Windows) 或 <code>ffmpeg</code> (macOS/Linux) 的完整路径配置到 <code>config/bot_config.toml</code> 文件中。</p><div class="language-toml"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ffmpeg_path = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;E:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">delveoper</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mmc010</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ffmpeg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ffmpeg.exe&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 示例路径</span></span></code></pre></div></li>',1))]),i[25]||(i[25]=e(`<h3 id="步骤三-启用功能并选择模型" tabindex="-1">步骤三: 启用功能并选择模型 <a class="header-anchor" href="#步骤三-启用功能并选择模型" aria-label="Permalink to “步骤三: 启用功能并选择模型”">​</a></h3><ol><li><p><strong>启用视频分析</strong>： 在 <code>config/bot_config.toml</code> 文件中，找到 <code>[video_analysis]</code> 部分，并将 <code>enable</code> 设置为 <code>true</code>。</p><div class="language-toml"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">video_analysis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">enable = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div></li><li><p><strong>选择模型</strong>： 在 <code>config/model_config.toml</code> 文件中，为 <code>utils_video</code> 任务配置一个或多个视觉语言模型（VLM）。</p><div class="language-toml"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">model_task_config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">utils_video</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model_list = [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;qwen2.5-vl-72b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div></li><li><p><strong>重启机器人</strong>： 保存配置文件并重启机器人以使更改生效。</p></li></ol><h2 id="参数详解" tabindex="-1">参数详解 <a class="header-anchor" href="#参数详解" aria-label="Permalink to “参数详解”">​</a></h2><p><code>config/bot_config.toml</code> 的 <code>[video_analysis]</code> 部分包含丰富的配置选项，您可以根据需求进行调整：</p><ul><li><code>analysis_mode</code>: (字符串) 分析模式。 <ul><li><code>&quot;batch_frames&quot;</code>: 批量分析，速度快，推荐。</li><li><code>&quot;frame_by_frame&quot;</code>: 逐帧分析，速度慢但更详细。</li><li><code>&quot;auto&quot;</code>: 自动选择模式。</li></ul></li><li><code>frame_extraction_mode</code>: (字符串) 抽帧模式。 <ul><li><code>&quot;keyframe&quot;</code>: 智能关键帧提取，推荐。</li><li><code>&quot;fixed_number&quot;</code>: 固定总帧数。</li><li><code>&quot;time_interval&quot;</code>: 按时间间隔抽帧。</li></ul></li><li><code>frame_interval_seconds</code>: (浮点数) 按时间间隔抽帧的秒数（仅在 <code>frame_extraction_mode</code> 为 <code>&quot;time_interval&quot;</code> 时生效）。</li><li><code>max_frames</code>: (整数) 最大分析帧数。</li><li><code>frame_quality</code>: (整数) 帧图像JPEG质量 (1-100)。</li><li><code>max_image_size</code>: (整数) 单帧最大图像尺寸(像素)。</li><li><code>enable_frame_timing</code>: (布尔值) 是否在分析中包含帧的时间信息。</li></ul><h3 id="ink-fox-核心配置" tabindex="-1">Ink-Fox 核心配置 <a class="header-anchor" href="#ink-fox-核心配置" aria-label="Permalink to “Ink-Fox 核心配置”">​</a></h3><ul><li><code>rust_keyframe_threshold</code>: (浮点数) 关键帧检测阈值，值越大关键帧越少。</li><li><code>rust_use_simd</code>: (布尔值) 启用SIMD优化（推荐）。</li><li><code>rust_block_size</code>: (整数) 处理块大小，较大值可能提高高分辨率视频性能。</li><li><code>rust_threads</code>: (整数) 线程数，0表示自动检测。</li></ul><h2 id="故障排查" tabindex="-1">故障排查 <a class="header-anchor" href="#故障排查" aria-label="Permalink to “故障排查”">​</a></h2><ul><li><strong>视频分析失败</strong>： <ul><li>检查 <code>ffmpeg_path</code> 是否配置正确。</li><li>检查 <code>model_config.toml</code> 中是否为 <code>utils_video</code> 配置了有效的模型。</li><li>查看日志文件 <code>logs/app_*.log.jsonl</code> 以获取详细的错误信息。</li></ul></li><li><strong>模块加载失败</strong>： <ul><li>如果 <code>inkfox</code> 模块加载失败，请尝试使用 <code>pip install inkfox --upgrade</code> 命令更新或重新安装。</li><li>对于手动编译的用户，请确保已按照本文档正确编译和安装模块。</li></ul></li></ul>`,9)),t(d),t(r)])}const C=p(g,[["render",u]]);export{y as __pageData,C as default};
