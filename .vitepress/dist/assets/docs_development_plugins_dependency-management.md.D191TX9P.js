import{_ as l,I as i,c as t,o as h,a3 as p,J as a}from"./chunks/framework.Coydrlbh.js";const u=JSON.parse('{"title":"插件Python依赖管理","description":"","frontmatter":{},"headers":[],"relativePath":"docs/development/plugins/dependency-management.md","filePath":"docs/development/plugins/dependency-management.md","lastUpdated":1758370203000}'),o={name:"docs/development/plugins/dependency-management.md"};function k(r,s,d,c,g,y){const n=i("NolebaseGitContributors"),e=i("NolebaseGitChangelog");return h(),t("div",null,[s[0]||(s[0]=p(`<h1 id="插件python依赖管理" tabindex="-1">插件Python依赖管理 <a class="header-anchor" href="#插件python依赖管理" aria-label="Permalink to “插件Python依赖管理”">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to “概述”">​</a></h2><p>为了简化插件开发，插件系统提供了一套强大的Python包依赖自动管理机制。当你的插件被加载时，系统会：</p><ol><li><strong>检查依赖</strong>: 自动分析插件所需的Python包是否已安装。</li><li><strong>版本验证</strong>: 确保已安装的包版本符合插件的要求。</li><li><strong>自动安装</strong>: 若依赖缺失，系统会自动尝试安装（此行为由全局配置控制）。</li><li><strong>提供反馈</strong>: 在出现问题时，提供详细的错误信息和日志，帮助快速定位问题。</li></ol><h2 id="如何为插件配置依赖" tabindex="-1">如何为插件配置依赖 <a class="header-anchor" href="#如何为插件配置依赖" aria-label="Permalink to “如何为插件配置依赖”">​</a></h2><p>你有两种方式来声明插件所需的Python依赖。</p><h3 id="方式1-简单字符串列表-适用于简单场景" tabindex="-1">方式1: 简单字符串列表 (适用于简单场景) <a class="header-anchor" href="#方式1-简单字符串列表-适用于简单场景" aria-label="Permalink to “方式1: 简单字符串列表 (适用于简单场景)”">​</a></h3><p>这是最快捷的方式，兼容旧版，适合定义简单的依赖。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> src.plugin_system </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BasePlugin</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> typing </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> List</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@register_plugin</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MySimplePlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BasePlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 以字符串列表的形式定义依赖</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    python_dependencies: List[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;requests&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;beautifulsoup4&gt;=4.9.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;httpx[socks]&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 支持 extras</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span></code></pre></div><h3 id="方式2-使用-pythondependency-对象-推荐" tabindex="-1">方式2: 使用 <code>PythonDependency</code> 对象 (推荐) <a class="header-anchor" href="#方式2-使用-pythondependency-对象-推荐" aria-label="Permalink to “方式2: 使用 PythonDependency 对象 (推荐)”">​</a></h3><p>对于复杂的依赖场景，强烈推荐使用 <code>PythonDependency</code> 对象。它提供了更强的控制力和更清晰的定义，尤其是在包的 <strong>安装名</strong> 和 <strong>导入名</strong> 不一致时。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> src.plugin_system </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BasePlugin, PythonDependency</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> typing </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> List</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@register_plugin</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyAdvancedPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BasePlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    python_dependencies: List[PythonDependency] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        PythonDependency(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            package_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;requests&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;=2.25.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            description</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;一个强大的HTTP请求库&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            optional</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">False</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        PythonDependency(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            package_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bs4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 导入名是 bs4</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            install_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;beautifulsoup4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装名是 beautifulsoup4</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;=4.9.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            description</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;强大的HTML和XML解析库&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            optional</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">False</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        PythonDependency(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            package_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;httpx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            install_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;httpx[socks]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装时使用的名称</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            description</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;支持SOCKS代理的异步HTTP客户端&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            optional</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 标记为可选依赖</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span></code></pre></div><h2 id="pythondependency-参数详解" tabindex="-1"><code>PythonDependency</code> 参数详解 <a class="header-anchor" href="#pythondependency-参数详解" aria-label="Permalink to “PythonDependency 参数详解”">​</a></h2><ul><li><code>package_name</code> (str): 包的 <strong>导入名</strong>，用于 <code>import</code> 检查。</li><li><code>version</code> (str, optional): 版本要求，遵循PEP 440格式 (例如 <code>&quot;&gt;_1.0.0&quot;</code>, <code>&quot;==2.1.3&quot;</code>)。</li><li><code>install_name</code> (str, optional): <code>pip</code> 安装时使用的名称。如果未提供，则默认使用 <code>package_name</code>。</li><li><code>description</code> (str, optional): 依赖的描述，会显示在日志和错误信息中，提高可读性。</li><li><code>optional</code> (bool): 是否为可选依赖。如果为 <code>True</code>，即使这个依赖检查失败，也不会阻止插件的加载，仅会记录一条警告。</li></ul><h2 id="工作流程" tabindex="-1">工作流程 <a class="header-anchor" href="#工作流程" aria-label="Permalink to “工作流程”">​</a></h2><p>依赖管理系统遵循以下步骤：</p><ol><li><strong>插件初始化</strong>: 当插件被加载时，系统开始检查其 <code>python_dependencies</code> 属性。</li><li><strong>依赖标准化</strong>: 如果你使用了简单的字符串列表，系统会将其内部转换为 <code>PythonDependency</code> 对象。</li><li><strong>检查与验证</strong>: 系统会尝试导入每个依赖包，并验证其版本是否满足要求。</li><li><strong>智能别名解析</strong>: 如果通过 <code>package_name</code> 直接导入失败 (例如 <code>import beautifulsoup4</code> 失败)，系统会查询一个内置的别名映射表 (例如 <code>beautifulsoup4</code> -&gt; <code>bs4</code>)，并尝试使用别名再次导入。</li><li><strong>自动安装</strong>: 如果依赖缺失且系统开启了自动安装功能，系统会调用 <code>pip</code> 来安装它。</li><li><strong>错误处理</strong>: 任何失败的步骤都会被详细记录，并根据依赖是否为可选来决定是否中止插件加载。</li></ol><h2 id="智能别名解析-smart-alias-resolution" tabindex="-1">智能别名解析 (Smart Alias Resolution) <a class="header-anchor" href="#智能别名解析-smart-alias-resolution" aria-label="Permalink to “智能别名解析 (Smart Alias Resolution)”">​</a></h2><h3 id="它解决了什么问题" tabindex="-1">它解决了什么问题？ <a class="header-anchor" href="#它解决了什么问题" aria-label="Permalink to “它解决了什么问题？”">​</a></h3><p>Python生态中，一些包的 <strong>安装名</strong> 与 <strong>导入名</strong> 并不相同，这常常让开发者感到困惑。例如：</p><ul><li>安装: <code>pip install beautifulsoup4</code> -&gt; 导入: <code>import bs4</code></li><li>安装: <code>pip install Pillow</code> -&gt; 导入: <code>import PIL</code></li><li>安装: <code>pip install scikit-learn</code> -&gt; 导入: <code>import sklearn</code></li></ul><p>为了简化开发，依赖管理系统内置了智能别名解析机制。</p><h3 id="它是如何工作的" tabindex="-1">它是如何工作的？ <a class="header-anchor" href="#它是如何工作的" aria-label="Permalink to “它是如何工作的？”">​</a></h3><p>当系统通过包名直接导入失败时，它会自动：</p><ol><li>查询一个内置的、包含数百个常见包的别名映射表。</li><li>如果在表中找到了对应的导入名，就使用该别名再次尝试导入。</li><li>如果别名导入成功，依赖检查通过。</li></ol><p>这个过程是全自动的，旨在处理绝大多数常见情况，让你在使用简单字符串格式定义依赖时也无需担心这些恼人的命名差异。</p><h3 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to “注意事项”">​</a></h3><ul><li><strong>最佳实践</strong>: 尽管有智能别名解析，我们仍然 <strong>强烈推荐</strong> 使用 <code>PythonDependency</code> 对象来明确指定 <code>package_name</code> (导入名) 和 <code>install_name</code> (安装名)。这能确保最高的准确性和可读性。</li><li><strong>覆盖范围</strong>: 内置的别名表已涵盖大量常用库，但无法保证100%覆盖。如果遇到别名库未收录的包，请务必使用 <code>PythonDependency</code> 对象进行精确定义。</li></ul><h2 id="日志输出示例" tabindex="-1">日志输出示例 <a class="header-anchor" href="#日志输出示例" aria-label="Permalink to “日志输出示例”">​</a></h2><p>一个成功的自动安装过程会产生类似以下的日志：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>[Plugin:web_search_tool] 开始自动安装Python依赖: [&#39;asyncddgs&#39;, &#39;httpx[socks]&#39;]</span></span>
<span class="line"><span>[Plugin:web_search_tool] 使用PyPI镜像源: https://pypi.tuna.tsinghua.edu.cn/simple</span></span>
<span class="line"><span>[Plugin:web_search_tool] ✅ 成功安装: asyncddgs</span></span>
<span class="line"><span>[Plugin:web_search_tool] ✅ 成功安装: httpx[socks]</span></span>
<span class="line"><span>[Plugin:web_search_tool] 🎉 所有依赖安装完成</span></span>
<span class="line"><span>[Plugin:web_search_tool] Python依赖检查通过</span></span></code></pre></div><h2 id="错误处理" tabindex="-1">错误处理 <a class="header-anchor" href="#错误处理" aria-label="Permalink to “错误处理”">​</a></h2><p>当依赖检查失败时，系统会：</p><ol><li>记录详细的错误信息到日志文件。</li><li>如果是 <strong>可选依赖</strong> 缺失，仅记录警告，插件会继续加载。</li><li>如果是 <strong>必需依赖</strong> 缺失且自动安装失败，将阻止插件加载，并给出清晰的错误提示。</li></ol><h2 id="最佳实践" tabindex="-1">最佳实践 <a class="header-anchor" href="#最佳实践" aria-label="Permalink to “最佳实践”">​</a></h2><ol><li><strong>首选 <code>PythonDependency</code> 对象</strong>: 这是最可靠、最明确的方式，能从根本上避免命名混淆。</li><li><strong>善用智能别名解析</strong>: 对于 <code>beautifulsoup4</code>、<code>Pillow</code> 这类常见包，可以直接在字符串列表里使用安装名，系统会自动解析。</li><li><strong>合理设置可选依赖</strong>: 将非核心功能的依赖标记为 <code>optional=True</code>，避免因次要功能的问题导致整个插件无法加载。</li><li><strong>明确版本要求</strong>: 为关键依赖指定清晰的版本范围，确保兼容性，避免潜在的冲突。</li><li><strong>添加描述信息</strong>: 好的描述能让其他开发者（以及未来的你）快速理解每个依赖的用途。</li><li><strong>充分测试</strong>: 在不同环境中测试你的插件，确保依赖配置无误。</li></ol><h2 id="安全考虑" tabindex="-1">安全考虑 <a class="header-anchor" href="#安全考虑" aria-label="Permalink to “安全考虑”">​</a></h2><ul><li>自动安装功能由系统管理员在全局配置中统一管理，插件开发者无法覆盖此设置。</li><li>所有安装操作都有详细的日志记录，便于审计和追踪。</li><li>安装过程有超时限制，以避免因网络问题导致系统长时间挂起。</li></ul><h2 id="故障排除" tabindex="-1">故障排除 <a class="header-anchor" href="#故障排除" aria-label="Permalink to “故障排除”">​</a></h2><h3 id="依赖安装失败" tabindex="-1">依赖安装失败 <a class="header-anchor" href="#依赖安装失败" aria-label="Permalink to “依赖安装失败”">​</a></h3><ol><li><strong>检查网络连接</strong>: 确保你的设备可以访问外部网络，特别是PyPI源。</li><li><strong>查看日志</strong>: 检查详细的错误日志，通常日志中会包含 <code>pip</code> 的原始错误输出，这是定位问题的关键。</li><li><strong>手动安装</strong>: 尝试在你的环境中手动运行 <code>pip install &lt;package_name&gt;</code>，看看是否能复现问题。这有助于判断是环境问题还是依赖定义问题。</li></ol><h3 id="导入错误" tabindex="-1">导入错误 <a class="header-anchor" href="#导入错误" aria-label="Permalink to “导入错误”">​</a></h3><ol><li><strong>确认包名与导入名</strong>: 检查你的 <code>package_name</code> 是否真的是导入时使用的名称。如果不是，请使用 <code>install_name</code> 来指定安装名。</li><li><strong>利用自动别名解析</strong>: 对于常见库，系统会自动尝试解析别名。如果你的库比较冷门且名称不一致，请务必使用 <code>PythonDependency</code> 对象。</li><li><strong>检查可选依赖配置</strong>: 确认 <code>optional=True</code> 是否被正确设置。</li></ol>`,43)),a(n),a(e)])}const F=l(o,[["render",k]]);export{u as __pageData,F as default};
