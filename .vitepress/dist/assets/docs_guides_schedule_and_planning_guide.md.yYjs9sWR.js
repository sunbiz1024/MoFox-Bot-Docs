import{_ as e,I as a,c as t,o as p,a3 as h,J as i}from"./chunks/framework.Coydrlbh.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guides/schedule_and_planning_guide.md","filePath":"docs/guides/schedule_and_planning_guide.md","lastUpdated":1758357261000}'),r={name:"docs/guides/schedule_and_planning_guide.md"};function o(k,s,g,d,E,c){const n=a("NolebaseGitContributors"),l=a("NolebaseGitChangelog");return p(),t("div",null,[s[0]||(s[0]=h(`<h3 id="mofox-bot-自主行为系统-日程、计划与睡眠" tabindex="-1">MoFox-Bot 自主行为系统：日程、计划与睡眠 <a class="header-anchor" href="#mofox-bot-自主行为系统-日程、计划与睡眠" aria-label="Permalink to “MoFox-Bot 自主行为系统：日程、计划与睡眠”">​</a></h3><h4 id="_1-系统概述" tabindex="-1">1. 系统概述 <a class="header-anchor" href="#_1-系统概述" aria-label="Permalink to “1. 系统概述”">​</a></h4><p>自主行为系统是 MoFox-Bot 框架中的一项核心功能簇，旨在赋予 AI 智能体（Bot）超越被动式应答的能力，使其能够基于预设的人格（Persona）和长期目标，自主地规划并执行有时序性的活动。该系统主要由<strong>日程与计划</strong>及<strong>睡眠</strong>两大子系统构成，共同为 Bot 模拟出具有“生活节奏”和“目标追求”的复杂行为模式，从而为用户提供更加真实和沉浸的交互体验。</p><p>本系统的核心特性包括：</p><ul><li><strong>长期目标驱动</strong>：系统允许 Bot 建立以月为单位的长期目标，例如“学习一门新的编程语言”或“深入研究特定领域的知识”。这确保了 Bot 的所有行为都具有内在的逻辑一致性和长期连贯性。</li><li><strong>动态日程生成</strong>：基于月度计划，系统会自动为 Bot 生成精细到小时的每日日程表。日程不仅包含与目标相关的任务（如学习、练习），也涵盖了符合其人设的日常活动（如休息、娱乐），从而模拟出完整的作息周期。</li><li><strong>情境感知交互</strong>：系统提供了一个标准接口（<code>get_current_activity()</code>），供其他模块查询 Bot 当前正在进行的活动。这使得对话系统等模块能够根据 Bot 的“当前状态”作出符合情境的回应，极大地增强了交互的真实感。</li><li><strong>逼真的作息模拟</strong>：通过与<strong>睡眠系统</strong>的深度集成，日程表中的“睡眠”时段将触发 Bot 进入真实的休眠状态。该状态由一个复杂的状态机管理，能够模拟入睡、失眠、被吵醒等多种情况，实现对生物作息的高度逼真模拟。</li></ul><h4 id="_2-架构设计与核心组件" tabindex="-1">2. 架构设计与核心组件 <a class="header-anchor" href="#_2-架构设计与核心组件" aria-label="Permalink to “2. 架构设计与核心组件”">​</a></h4><p>为实现上述功能，自主行为系统采用了一种双层规划架构，并将睡眠管理作为其不可或缺的执行环，确保了系统运行的逻辑性与真实感。</p><div class="language-mermaid"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph TD</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A[用户设定的 Bot 核心人设] --&gt; B{LLM 规划引擎};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C[Bot 的长期记忆] --&gt; B;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    D[历史计划数据] --&gt; B;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    subgraph 宏观战略层</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        B -- 生成月度计划 --&gt; E[MonthlyPlanManager];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        E -- 存储 --&gt; F[(数据库: 月度计划池)];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    subgraph 微观执行层</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        F -- 读取 --&gt; G[ScheduleManager];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        G -- 请求生成每日日程 --&gt; B;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        B -- 返回详细日程 --&gt; G;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        G -- 存储 --&gt; H[(数据库: 每日日程表)];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    subgraph 状态执行层</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        G -- 通知作息时间 --&gt; J[SleepManager];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        K[唤醒系统/睡眠压力] --&gt; J;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        J -- 管理睡眠状态 --&gt; L{Bot 状态机};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        H -- 查询当前活动 --&gt; I{其他模块 如: 对话系统};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        L -- 更新 --&gt; I;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    end</span></span></code></pre></div><h5 id="_2-1-宏观战略层-月度计划管理器-monthlyplanmanager" tabindex="-1">2.1. 宏观战略层：月度计划管理器 (<code>MonthlyPlanManager</code>) <a class="header-anchor" href="#_2-1-宏观战略层-月度计划管理器-monthlyplanmanager" aria-label="Permalink to “2.1. 宏观战略层：月度计划管理器 (MonthlyPlanManager)”">​</a></h5><p><code>MonthlyPlanManager</code> 扮演着 Bot“人生规划师”的角色，其核心职责是在每个月的月初，为 Bot 制定一份全新的、具有战略指导意义的月度计划。</p><ul><li><strong>工作机制</strong>：作为一个后台定时任务，<code>MonthlyPlanManager</code> 会在每月的第一天零点被自动唤醒。</li><li><strong>工作流程</strong>： <ol><li><strong>信息收集</strong>：启动后，它会首先聚合 Bot 的核心人设、长期记忆以及过往的计划执行情况作为规划依据。</li><li><strong>与 LLM 交互</strong>：随后，它将调用 <code>PlanManager</code>，将收集到的信息构建成一个结构化的提示（Prompt），请求大语言模型（LLM）生成符合 Bot 长期发展的月度目标。</li><li><strong>持久化存储</strong>：LLM 返回的结构化目标将被解析并存储于数据库的“月度计划池”中，作为本月所有日常活动的战略起点。</li></ol></li></ul><h5 id="_2-2-微观执行层-每日日程管理器-schedulemanager" tabindex="-1">2.2. 微观执行层：每日日程管理器 (<code>ScheduleManager</code>) <a class="header-anchor" href="#_2-2-微观执行层-每日日程管理器-schedulemanager" aria-label="Permalink to “2.2. 微观执行层：每日日程管理器 (ScheduleManager)”">​</a></h5><p><code>ScheduleManager</code> 相当于 Bot 的“每日管家”，负责将月度计划中的宏观目标分解为具体、可执行的每日日程表。</p><ul><li><strong>工作机制</strong>：该管理器同样以定时任务的形式，在每天零点启动。</li><li><strong>工作流程</strong>： <ol><li><strong>目标抽取</strong>：从数据库中读取当月的计划池，抽取数个待办目标。</li><li><strong>生成日程</strong>：围绕这些抽取的短期目标，再次请求 LLM 生成一份详细到小时的日程安排。</li><li><strong>状态更新与存储</strong>：生成的日程表将被持久化到数据库，并作为当天 Bot 行为的唯一依据。</li></ol></li><li><strong>核心接口与应用</strong>： <ul><li><strong><code>get_current_activity()</code></strong>：此接口允许系统的任何其他部分查询 Bot 在当前时间点的预定活动。</li><li><strong>与 <code>SleepManager</code> 联动</strong>：当日程进入“睡眠”时间，<code>ScheduleManager</code> 会立即通知 <code>SleepManager</code>，触发睡眠流程。</li></ul></li></ul><h5 id="_2-3-状态执行层-睡眠管理器-sleepmanager" tabindex="-1">2.3. 状态执行层：睡眠管理器 (<code>SleepManager</code>) <a class="header-anchor" href="#_2-3-状态执行层-睡眠管理器-sleepmanager" aria-label="Permalink to “2.3. 状态执行层：睡眠管理器 (SleepManager)”">​</a></h5><p><code>SleepManager</code> 是实现 Bot 逼真作息的关键。它通过一个复杂的状态机来模拟角色的睡眠周期，并与计划系统及唤醒系统紧密协作。</p><ul><li><p><strong>核心状态</strong>：</p><ul><li><strong>AWAKE (清醒)</strong>：角色的常规活动状态。</li><li><strong>PREPARING_SLEEP (准备入睡)</strong>：进入睡眠前的短暂过渡期，可配置发送晚安通知。</li><li><strong>SLEEPING (正在睡觉)</strong>：角色处于休眠中，不会响应大部分消息。</li><li><strong>INSOMNIA (失眠)</strong>：在睡眠期间可能由“睡眠压力”或随机概率触发的短暂清醒状态。</li><li><strong>WOKEN_UP (被吵醒)</strong>：当角色在睡眠中被强制唤醒时进入此状态，会尝试在延迟后重新入睡。</li></ul></li><li><p><strong>配置选项</strong>：您可以在 <code>bot_config.toml</code> 文件中对睡眠系统进行详细配置，以塑造不同的作息性格。</p><div class="language-toml"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep_system</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 是否启用睡眠系统</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">enable = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 是否启用弹性睡眠 (根据“睡眠压力”延迟入睡)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">enable_flexible_sleep = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 弹性睡眠压力阈值 (低于此值考虑熬夜)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flexible_sleep_pressure_threshold = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 最大睡眠延迟分钟数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">max_sleep_delay_minutes = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">120</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 是否启用睡前通知</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">enable_pre_sleep_notification = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 失眠触发延迟分钟数范围 [min, max]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">insomnia_trigger_delay_minutes = [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 失眠持续分钟数范围 [min, max]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">insomnia_duration_minutes = [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 随机失眠概率</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">random_insomnia_chance = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 被吵醒后尝试重新入睡的延迟分钟数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">re_sleep_delay_minutes = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span></code></pre></div></li><li><p><strong>应用示例</strong>：</p><ul><li><strong>规律作息</strong>：关闭 <code>enable_flexible_sleep</code>。</li><li><strong>喜欢熬夜</strong>：调高 <code>flexible_sleep_pressure_threshold</code> 和 <code>max_sleep_delay_minutes</code>。</li></ul></li></ul><h4 id="_3-总结" tabindex="-1">3. 总结 <a class="header-anchor" href="#_3-总结" aria-label="Permalink to “3. 总结”">​</a></h4><p>MoFox-Bot 的自主行为系统通过“月度计划”、“每日日程”和“睡眠管理”的三层架构，将用户体验的深度与技术实现的专业性相结合，使 Bot 从一个简单的应答工具，转变为一个行为可预测、有成长轨迹、作息逼真的“虚拟生命”。通过启用并善用此系统，开发者可以创造出真正独一无二、能够与用户建立深度情感连接的 AI 伙伴。</p>`,19)),i(n),i(l)])}const u=e(r,[["render",o]]);export{y as __pageData,u as default};
