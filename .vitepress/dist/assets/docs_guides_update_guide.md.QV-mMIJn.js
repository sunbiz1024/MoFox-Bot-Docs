import{_ as t,I as i,c as n,o,a3 as h,J as a}from"./chunks/framework.Coydrlbh.js";const F=JSON.parse('{"title":"MoFox_Bot 更新指南(仅适用于uv手动部署的使用者)","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guides/update_guide.md","filePath":"docs/guides/update_guide.md","lastUpdated":1758612517000}'),p={name:"docs/guides/update_guide.md"};function d(r,s,k,g,c,b){const l=i("NolebaseGitContributors"),e=i("NolebaseGitChangelog");return o(),n("div",null,[s[0]||(s[0]=h(`<h1 id="mofox-bot-更新指南-仅适用于uv手动部署的使用者" tabindex="-1">MoFox_Bot 更新指南(仅适用于uv手动部署的使用者) <a class="header-anchor" href="#mofox-bot-更新指南-仅适用于uv手动部署的使用者" aria-label="Permalink to “MoFox_Bot 更新指南(仅适用于uv手动部署的使用者)”">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to “概述”">​</a></h2><p>欢迎使用 MoFox_Bot 更新指南。本指南将引导您安全、高效地将 MoFox_Bot 更新到最新版本，并确保您的个人配置和数据万无一失。</p><p>更新是获取新功能、修复已知问题和提升稳定性的重要途径。请在更新前仔细阅读本指南，特别是 <strong>“第一章：安全第一——备份你的重要数据”</strong> 部分。</p><h2 id="第一章-安全第一——备份你的重要数据" tabindex="-1">第一章：安全第一——备份你的重要数据 <a class="header-anchor" href="#第一章-安全第一——备份你的重要数据" aria-label="Permalink to “第一章：安全第一——备份你的重要数据”">​</a></h2><p>在进行任何更新操作之前，备份是<strong>至关重要</strong>的一步。这就像给你的机器人买了一份保险，即使更新过程中出现意外，我们也能轻松地回到最初的状态。</p><h3 id="_1-1-需要备份的核心文件" tabindex="-1">1.1 需要备份的核心文件 <a class="header-anchor" href="#_1-1-需要备份的核心文件" aria-label="Permalink to “1.1 需要备份的核心文件”">​</a></h3><p>我们需要备份以下三个核心部分，它们包含了你对机器人的所有个性化配置和历史数据：</p><ol><li><strong><code>config</code> 文件夹</strong>：这里存放着机器人的“身份证”（<code>bot_config.toml</code>）、“大脑”（<code>model_config.toml</code>）以及所有插件的功能配置。</li><li><strong><code>data</code> 文件夹</strong>：这里是机器人的“记忆体”，包含了数据库文件（如 <code>maibota.db</code>）以及其他插件可能产生的数据。</li><li><strong><code>.env</code> 文件</strong>：这个文件位于项目根目录，包含了最基础的环境变量设置。</li></ol><h3 id="_1-2-如何进行备份-图形化操作" tabindex="-1">1.2 如何进行备份 (图形化操作) <a class="header-anchor" href="#_1-2-如何进行备份-图形化操作" aria-label="Permalink to “1.2 如何进行备份 (图形化操作)”">​</a></h3><p>备份过程非常简单，只需复制粘贴即可。</p><ol><li><strong>定位文件</strong>: 打开你的 <code>MoFox_Bot</code> 项目文件夹。</li><li><strong>创建备份文件夹</strong>: 在 <code>MoFox_Bot</code> 文件夹<strong>之外</strong>的其他任何安全位置（例如桌面），创建一个新的文件夹，并将其命名为 <code>MoFox_Bot_Backup_YYYYMMDD</code> (例如 <code>MoFox_Bot_Backup_20250923</code>)。</li><li><strong>复制文件</strong>: <ul><li>将 <code>MoFox_Bot</code> 文件夹内的 <code>config</code> 文件夹、<code>data</code> 文件夹和 <code>.env</code> 文件，<strong>复制</strong>到你刚刚创建的备份文件夹中。</li></ul></li></ol><p>完成以上步骤后，你的重要数据就已经安全了。现在，我们可以放心地进行下一步操作。</p><h3 id="_1-3-全量备份-可选-但更安全" tabindex="-1">1.3 全量备份 (可选，但更安全) <a class="header-anchor" href="#_1-3-全量备份-可选-但更安全" aria-label="Permalink to “1.3 全量备份 (可选，但更安全)”">​</a></h3><p>除了备份核心的配置文件和数据外，我们还强烈建议你将整个 <code>MoFox_Bot</code> 文件夹完整地复制一份，作为最全面的“镜像备份”。</p><ul><li><strong>优点</strong>: 这是最保险的方式，万一更新出现任何无法解决的严重问题，你甚至不需要进行版本回退，直接将整个备份文件夹恢复即可。</li><li><strong>操作</strong>: 直接将你的 <code>MoFox_Bot</code> 文件夹复制到安全位置即可。</li></ul><h2 id="第二章-获取更新——与最新代码同步" tabindex="-1">第二章：获取更新——与最新代码同步 <a class="header-anchor" href="#第二章-获取更新——与最新代码同步" aria-label="Permalink to “第二章：获取更新——与最新代码同步”">​</a></h2><h3 id="_2-1-切换开发分支-可选但推荐" tabindex="-1">2.1 切换开发分支 (可选但推荐) <a class="header-anchor" href="#_2-1-切换开发分支-可选但推荐" aria-label="Permalink to “2.1 切换开发分支 (可选但推荐)”">​</a></h3><p>MoFox_Bot 通常会有不同的开发分支，例如 <code>master</code> (主分支，相对稳定) 和 <code>dev</code> (开发分支，功能最新)。你可以根据自己的需求选择要更新的分支。</p><ol><li><p><strong>打开命令行</strong>:</p><ul><li>进入 <code>MoFox_Bot</code> 文件夹。</li><li>在地址栏输入 <code>cmd</code> 并回车，快速打开命令行终端。</li></ul></li><li><p><strong>查看当前分支</strong>:</p><ul><li>输入以下命令，查看你当前所在的分支。星号 <code>*</code> 所在的位置就是当前分支。<div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span></span></code></pre></div></li></ul></li><li><p><strong>切换到目标分支</strong>:</p><ul><li>如果你想切换到 <code>dev</code> 分支以体验最新功能，请执行：<div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span></code></pre></div></li><li>如果你想切换回稳定的主分支，请执行：<div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span></code></pre></div></li></ul></li></ol><h3 id="_2-2-拉取最新代码" tabindex="-1">2.2 拉取最新代码 <a class="header-anchor" href="#_2-2-拉取最新代码" aria-label="Permalink to “2.2 拉取最新代码”">​</a></h3><p>选定分支后，我们就可以从 GitHub 上拉取最新的代码了。</p><ul><li>在命令行终端中，执行以下命令：<div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span></span></code></pre></div></li></ul><blockquote><p><strong>🌐 网络小贴士</strong>: 如果你发现下载速度极慢或连接失败，可以尝试为 Git 设置国内镜像，或者在执行 <code>git pull</code> 时遇到问题，可以尝试重新克隆项目。</p></blockquote><p>命令执行后，Git 会自动下载并合并最新的代码。</p><h2 id="第三章-注入新的活力——更新依赖" tabindex="-1">第三章：注入新的活力——更新依赖 <a class="header-anchor" href="#第三章-注入新的活力——更新依赖" aria-label="Permalink to “第三章：注入新的活力——更新依赖”">​</a></h2><p>代码更新后，项目所需的程序库（依赖）可能也发生了变化。我们需要根据最新的“购物清单” (<code>requirements.txt</code>) 来更新我们的虚拟环境。</p><ol><li><p><strong>激活虚拟环境</strong>:</p><ul><li>确保你的命令行终端位于 <code>MoFox_Bot</code> 文件夹内。</li><li>根据你的终端类型，执行对应的激活命令： <ul><li><strong>CMD</strong>: <code>.venv\\Scripts\\activate</code></li><li><strong>PowerShell</strong>: <code>.venv\\Scripts\\Activate.ps1</code></li></ul></li><li>成功激活后，命令行提示符前会出现 <code>(.venv)</code> 标记。</li></ul></li><li><p><strong>安装/更新依赖</strong>:</p><ul><li>在<strong>已激活</strong>的终端中，执行以下命令：<div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requirements.txt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://mirrors.aliyun.com/pypi/simple</span></span></code></pre></div></li><li><code>uv</code> 会自动对比你环境中已安装的库和新“清单”中的要求，然后下载缺失的、更新过时的，并卸载不再需要的库。</li></ul></li></ol><h2 id="第四章-重启-焕然一新" tabindex="-1">第四章：重启，焕然一新！ <a class="header-anchor" href="#第四章-重启-焕然一新" aria-label="Permalink to “第四章：重启，焕然一新！”">​</a></h2><p>所有更新步骤都已完成！现在，你可以像往常一样启动你的机器人了。</p><ul><li>在<strong>已激活</strong>的终端中，执行启动命令：<div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bot.py</span></span></code></pre></div></li></ul><p>观察日志，当机器人成功连接并运行时，就代表本次更新圆满成功！去和你的机器人打个招呼，体验一下新功能吧！</p><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>注意：配置文件更新</p><p>更新后首次启动时，MoFox_Bot 会自动检查并更新你的 <code>config</code> 文件夹内的配置文件，以匹配新版本的功能。</p><ul><li><strong>检查配置</strong>: 请在启动后检查你的配置文件（尤其是 <code>bot_config.toml</code> 和 <code>model_config.toml</code>），确保你之前的个性化设置没有丢失或被覆盖。</li><li><strong>备份很重要</strong>: 这也再次凸显了备份的重要性。如果发现配置有问题，可以随时从备份中恢复。</li></ul></div><h2 id="故障排除" tabindex="-1">故障排除 <a class="header-anchor" href="#故障排除" aria-label="Permalink to “故障排除”">​</a></h2><details><summary><b>Q1: 更新后启动失败，或者出现奇怪的错误？</b></summary><p>这通常是更新过程中出现了未预料到的问题。但别担心，我们有万能的群友们！</p><ol><li>你可以带着启动失败时的错误日志，前往项目的 GitHub Issues 或社区寻求帮助。</li><li>如果你在社区中找不到解决方案，可以考虑恢复到之前的备份(如果你之前备份了整个主程序的话)</li></ol></details><details><summary><b>Q2: \`git pull\` 时提示有冲突 (conflict)？</b></summary><p>这通常意味着你不小心修改了项目本身的某些文件。对于大多数用户来说，最简单的解决方法是：</p><ol><li><strong>放弃本地修改</strong>: <ul><li>执行以下命令，放弃你本地的修改，并强制与服务器同步：<div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --hard</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin/master</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 如果你在 master 分支</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 或者</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --hard</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin/dev</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # 如果你在 dev 分支</span></span></code></pre></div></li></ul><blockquote><p><strong>⚠️ 警告</strong>: 这个命令会<strong>丢弃</strong>你对项目代码的所有本地修改。在执行前，请确保你没有重要的自定义代码。通常情况下，用户的个性化内容都保存在我们已经备份的 <code>config</code> 等文件夹中，所以这个操作是安全的。</p></blockquote></li><li><strong>重新拉取</strong>: <ul><li>放弃修改后，再重新执行 <code>git pull</code> 命令。</li></ul></li></ol></details><details><summary><b>Q3: 如果我觉得新版就是一坨屎怎么办</b></summary><p>最简单的解决方法是回退到上一个正常的版本。</p><p>你可以通过以下 Git 命令来完成版本回退：</p><ol><li><p><strong>查找历史版本号</strong></p><p>首先，使用以下命令查看最近的提交记录：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> log</span></span></code></pre></div><p>你会看到类似下面的输出，每一条记录都有一个唯一的“版本号”（commit hash）。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>commit a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0 (HEAD -&gt; main, origin/main)</span></span>
<span class="line"><span>Author: Momo &amp;lt;momo@example.com&amp;gt;</span></span>
<span class="line"><span>Date:   Tue Sep 23 15:00:00 2025 +0800</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    feat: Add new feature</span></span>
<span class="line"><span></span></span>
<span class="line"><span>commit b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0a1</span></span>
<span class="line"><span>Author: Momo &amp;lt;momo@example.com&amp;gt;</span></span>
<span class="line"><span>Date:   Mon Sep 22 14:00:00 2025 +0800</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    fix: Fix a bug</span></span></code></pre></div></li><li><p><strong>回退到指定版本</strong></p><p>选择一个你想要回退到的版本的 commit hash (例如 <code>b2c3d4e5...</code>)，然后执行以下命令。</p><p><strong>警告：这个操作会丢弃你本地的所有未提交的修改，请谨慎操作！</strong></p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --hard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">你要回退到的版本号</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>例如:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --hard</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0a1</span></span></code></pre></div></li><li><p><strong>重新安装依赖</strong></p><p>版本回退后，依赖库可能也需要调整回旧版本。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requirements.txt</span></span></code></pre></div></li></ol><p>完成以上步骤后，你的 Mofox 就成功回退到指定版本了。</p></details>`,37)),a(l),a(e)])}const m=t(p,[["render",d]]);export{F as __pageData,m as default};
