import{_ as r,I as a,c as o,o as k,a3 as t,j as i,J as n,a as l,w as g}from"./chunks/framework.Coydrlbh.js";const f=JSON.parse('{"title":"📄 麦麦知识库（LPMM）使用指南","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guides/lpmm_guide.md","filePath":"docs/guides/lpmm_guide.md","lastUpdated":1758621690000}'),d={name:"docs/guides/lpmm_guide.md"};function c(F,s,u,b,y,C){const e=a("VPNolebaseInlineLinkPreview"),p=a("NolebaseGitContributors"),h=a("NolebaseGitChangelog");return k(),o("div",null,[s[5]||(s[5]=t(`<h1 id="📄-麦麦知识库-lpmm-使用指南" tabindex="-1">📄 麦麦知识库（LPMM）使用指南 <a class="header-anchor" href="#📄-麦麦知识库-lpmm-使用指南" aria-label="Permalink to “📄 麦麦知识库（LPMM）使用指南”">​</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to “简介”">​</a></h2><p>欢迎使用全新升级的麦麦知识库（LPMM）！我们引入了一款强大的一体化学习工具，它将以往复杂的多步操作整合进一个简单的交互式菜单。现在，为你的 MoFox 注入知识，就像与一位智能助手对话一样轻松自然。</p><p>新版 LPMM 的核心优势：</p><ul><li><strong>一键启动</strong>：告别繁琐的命令，一个脚本就能搞定一切。</li><li><strong>交互式菜单</strong>：清晰的选项引导，让你准确知道每一步在做什么。</li><li><strong>自动化流程</strong>：从数据清洗、信息提取到最终导入，全程自动化，省时省力。</li><li><strong>零配置</strong>：不再需要复杂的配置文件，开箱即用。</li></ul><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to “注意事项”">​</a></h2><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>请仔细阅读以下注意事项，以免引起不必要的麻烦与支出</p></div><p>在开始之前，请花几分钟阅读以下提示，这将帮助你获得最佳的知识学习效果，并避免不必要的开销：</p><ul><li><strong>文本质量</strong>：知识源的质量是关键。请确保你的 <code>.txt</code> 文件分段清晰，没有无关的符号或格式，这将直接影响 AI 的理解和提取效果。</li><li><strong>模型选择与费用</strong>：知识提取是一个计算密集型任务。我们推荐使用性能均衡的大模型（如 32B 至 72B 级别），以在效果和成本之间找到最佳平衡点。</li><li><strong>API 速率</strong>：知识学习过程会向模型 API 发起大量请求。请留意你所选模型服务的速率限制，避免因请求过快而被暂时封禁。</li><li><strong>系统资源</strong>：在进行知识导入时，脚本会大量占用 CPU 和内存资源。建议在性能较好的计算机上运行此工具。</li></ul><h2 id="快速上手-三步构建你的专属知识库" tabindex="-1">快速上手：三步构建你的专属知识库 <a class="header-anchor" href="#快速上手-三步构建你的专属知识库" aria-label="Permalink to “快速上手：三步构建你的专属知识库”">​</a></h2><h3 id="第一步-准备你的-教材" tabindex="-1">第一步：准备你的“教材” <a class="header-anchor" href="#第一步-准备你的-教材" aria-label="Permalink to “第一步：准备你的“教材””">​</a></h3><p>首先，你需要为你的人工智能准备学习材料。</p><ol><li><p><strong>创建目录</strong>：在项目根目录的 <code>data</code> 文件夹下，创建一个名为 <code>lpmm_raw_data</code> 的新文件夹。</p></li><li><p><strong>准备文件</strong>：将你的知识源文件整理成一个或多个 <code>.txt</code> 文件。</p></li><li><p><strong>内容格式</strong>：</p><ul><li><strong>一个主题一段落</strong>：将相关联的内容组织在同一个段落中。</li><li><strong>空行分隔</strong>：使用一个空行来分隔不同的段落。这能帮助 AI 更好地理解上下文。</li></ul><p><strong>优秀示例</strong>：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>精神状态良好：这是一种网络流行语，通常用来反讽自己实际上精神状态非常不稳定，是年轻人在高压生活下的一种幽默自嘲。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>躺平：指无论外界如何变化，内心都毫无波澜，不再进行无谓的挣扎和反抗。它体现了一种顺从和“佛系”的心态，表示对激烈竞争的厌倦。</span></span></code></pre></div></li><li><p><strong>放入文件</strong>：将准备好的 <code>.txt</code> 文件全部放入 <code>data/lpmm_raw_data</code> 文件夹中。</p></li></ol><h3 id="第二步-启动-智能学习助手" tabindex="-1">第二步：启动“智能学习助手” <a class="header-anchor" href="#第二步-启动-智能学习助手" aria-label="Permalink to “第二步：启动“智能学习助手””">​</a></h3><p>现在，让我们唤醒这位智能学习助手。</p><ol><li><strong>激活虚拟环境</strong>：打开终端，并激活你的 Python 虚拟环境。<div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果你在 Windows 上</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">venv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Scripts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">activate</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果你在 Linux 或 macOS 上</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./venv/bin/activate</span></span></code></pre></div></li><li><strong>运行学习工具</strong>：执行以下命令，启动 LPMM 学习工具。<div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MoFox-Bot</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #CD到你的机器人目录下面</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./scripts/lpmm_learning_tool.py</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#uv用户使用这个</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./scripts/lpmm_learning_tool.py</span></span></code></pre></div></li></ol><h3 id="第三步-选择学习模式" tabindex="-1">第三步：选择学习模式 <a class="header-anchor" href="#第三步-选择学习模式" aria-label="Permalink to “第三步：选择学习模式”">​</a></h3><p>运行脚本后，你会看到一个清晰的功能菜单。这就像是给你的 AI 助手下达指令：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>=== LPMM 知识库学习工具 ===</span></span>
<span class="line"><span>1. [数据预处理] -&gt; 读取 .txt 文件 (来源: ./mmc/data/lpmm_raw_data/)</span></span>
<span class="line"><span>2. [信息提取] -&gt; 提取信息并存为 .json (输出至: ./mmc/data/openie/)</span></span>
<span class="line"><span>3. [数据导入] -&gt; 从 openie 文件夹自动导入最新知识</span></span>
<span class="line"><span>4. [全流程] -&gt; 按顺序执行 1 -&gt; 2 -&gt; 3</span></span>
<span class="line"><span>5. [指定导入] -&gt; 从特定的 openie.json 文件导入知识</span></span>
<span class="line"><span>0. [退出]</span></span>
<span class="line"><span>------------------------------</span></span>
<span class="line"><span>请输入你的选择 (0-5):</span></span></code></pre></div><p><strong>菜单功能导览</strong>：</p><ul><li><p><strong>选项 1: [数据预处理]</strong></p><ul><li><strong>它做什么？</strong> 帮你通读并整理一遍“教材”，去除所有重复的内容。</li><li><strong>何时使用？</strong> 如果你只想检查一下数据，或者分步执行，可以先选择它。</li></ul></li><li><p><strong>选项 2: [信息提取]</strong></p><ul><li><strong>它做什么？</strong> 启动 AI 进行深度阅读，从你的文本中划出所有的“知识点”（即实体和它们之间的关系）。</li><li><strong>何时使用？</strong> 当你完成了数据预处理，或者想单独进行信息提取时。</li></ul></li><li><p><strong>选项 3: [数据导入]</strong></p><ul><li><strong>它做什么？</strong> 将所有划好的“知识点”正式、永久地记入 AI 的“大脑”（知识图谱和向量数据库）中。</li><li><strong>何时使用？</strong> 当你已经生成了知识点文件（.json），并希望将其导入系统时。</li></ul></li><li><p><strong>选项 4: [全流程]</strong></p><ul><li><strong>它做什么？</strong> <strong>一键托管模式！</strong> 它会自动按顺序完成“整理教材 -&gt; 划重点 -&gt; 记入大脑”的全过程。</li><li><strong>何时使用？</strong> <strong>强烈推荐初次使用者或希望一次性完成所有操作的用户选择此项。</strong></li></ul></li><li><p><strong>选项 5: [指定导入]</strong></p><ul><li><strong>它做什么？</strong> 如果你手头有一份之前提取好的“知识点笔记”（特定的 <code>openie.json</code> 文件），这个选项可以让你直接将其导入。</li><li><strong>何时使用？</strong> 用于数据迁移或从特定备份文件恢复。</li></ul></li></ul><h2 id="进阶技巧" tabindex="-1">进阶技巧 <a class="header-anchor" href="#进阶技巧" aria-label="Permalink to “进阶技巧”">​</a></h2><h3 id="gpu-加速" tabindex="-1">GPU 加速 <a class="header-anchor" href="#gpu-加速" aria-label="Permalink to “GPU 加速”">​</a></h3><p>如果你的电脑配备了 NVIDIA 显卡（RTX 20系及以上，仅限 Linux），可以通过安装 GPU 版本的 <code>faiss</code> 库来大幅提升知识导入的速度。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 首先，卸载可能已存在的 CPU 版本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> uninstall</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> faiss-cpu</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 然后，根据你的 CUDA 版本选择安装</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># CUDA 11.x</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> faiss-gpu-cu11</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># CUDA 12.x</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> faiss-gpu-cu12</span></span></code></pre></div><h2 id="疑难解答-faq" tabindex="-1">疑难解答 (FAQ) <a class="header-anchor" href="#疑难解答-faq" aria-label="Permalink to “疑难解答 (FAQ)”">​</a></h2><p><strong>问：我运行脚本时失败了，好像提示和 <code>quick_algo</code> 有关的错误？</strong></p><p>答：<code>quick_algo</code> 是一个用于加速某些算法的依赖库。在大多数情况下，你不需要手动处理它。但如果脚本确实因为缺少它而失败，你可以按照以下步骤手动安装：</p>`,28)),i("ul",null,[s[4]||(s[4]=t(`<li><p><strong>对于 Windows (x86_64)</strong>:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> quick_algo</span></span></code></pre></div></li><li><p><strong>对于 Linux</strong>:</p><ol><li>确保你安装了 C++ 编译器（GCC/G++）：<div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Debian/Ubuntu</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build-essential</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Red Hat/Fedora/CentOS</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dnf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gcc-c++</span></span></code></pre></div></li><li>然后，在你的虚拟环境中安装：<div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> quick-algo</span></span></code></pre></div></li></ol></li>`,2)),i("li",null,[i("p",null,[s[1]||(s[1]=i("strong",null,"对于 macOS",-1)),s[2]||(s[2]=l(": 请参考 ",-1)),n(e,{href:"https://docs.mai-mai.org/manual/usage/compile_and_install.html",target:"_blank",rel:"noreferrer"},{default:g(()=>[...s[0]||(s[0]=[l("MaiCore官方的手动编译文档",-1)])]),_:1}),s[3]||(s[3]=l(" 进行安装。",-1))])])]),n(p),n(h)])}const _=r(d,[["render",c]]);export{f as __pageData,_ as default};
