import{_ as e,I as s,c as n,o as l,a3 as p,J as o}from"./chunks/framework.Coydrlbh.js";const u=JSON.parse('{"title":"如何更换 MoFox_Bot 的端口？","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guides/how_to_change_port.md","filePath":"docs/guides/how_to_change_port.md","lastUpdated":1758428108000}'),c={name:"docs/guides/how_to_change_port.md"};function r(d,a,h,g,k,_){const i=s("NolebaseGitContributors"),t=s("NolebaseGitChangelog");return l(),n("div",null,[a[0]||(a[0]=p(`<h1 id="如何更换-mofox-bot-的端口" tabindex="-1">如何更换 MoFox_Bot 的端口？ <a class="header-anchor" href="#如何更换-mofox-bot-的端口" aria-label="Permalink to “如何更换 MoFox_Bot 的端口？”">​</a></h1><p>在大多数情况下，你<strong>不需要</strong>修改 MoFox_Bot 的默认端口。但如果你遇到了<strong>端口冲突</strong>（例如，电脑上其他程序占用了 <code>8000</code> 或 <code>8095</code> 端口），那么本指南将帮助你安全地更换端口。</p><p>MoFox_Bot 主要涉及两个端口：</p><ol><li><strong>内部服务端口</strong> (默认为 <code>8000</code>)：这是 MoFox_Bot 核心服务运行的端口，用于内部组件间的通信。</li><li><strong>Napcat 适配器端口</strong> (默认为 <code>8095</code>)：这是 MoFox_Bot 与 Napcat QQ 客户端建立连接的端口。</li></ol><p>下面，我们将分别介绍如何修改这两个端口。</p><h2 id="场景一-修改内部服务端口-例如-8000-端口被占用" tabindex="-1">场景一：修改内部服务端口 (例如 <code>8000</code> 端口被占用) <a class="header-anchor" href="#场景一-修改内部服务端口-例如-8000-端口被占用" aria-label="Permalink to “场景一：修改内部服务端口 (例如 8000 端口被占用)”">​</a></h2><p>当你启动 MoFox_Bot 时，如果日志中出现类似 <code>Address already in use</code> 的错误，且明确指向 <code>8000</code> 端口，那么你需要修改内部服务端口。</p><p><strong>操作步骤 (共两步)</strong>：</p><h3 id="第一步-修改-env-文件" tabindex="-1">第一步：修改 <code>.env</code> 文件 <a class="header-anchor" href="#第一步-修改-env-文件" aria-label="Permalink to “第一步：修改 .env 文件”">​</a></h3><ol><li>打开 MoFox_Bot 项目的<strong>根目录</strong>。</li><li>找到并用代码编辑器打开 <code>.env</code> 文件。</li><li>修改 <code>PORT</code> 的值为一个新的端口号。例如，我们想把它改成 <code>8088</code>。<div class="language-env"><button title="Copy Code" class="copy"></button><span class="lang">env</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>HOST=127.0.0.1</span></span>
<span class="line"><span>PORT=8088  # &lt;-- 修改这里</span></span>
<span class="line"><span>EULA_CONFIRMED=true</span></span></code></pre></div></li></ol><h3 id="第二步-同步修改-napcat-适配器配置" tabindex="-1">第二步：同步修改 Napcat 适配器配置 <a class="header-anchor" href="#第二步-同步修改-napcat-适配器配置" aria-label="Permalink to “第二步：同步修改 Napcat 适配器配置”">​</a></h3><p>由于内部服务端口发生了变化，我们还需要告诉 Napcat 适配器去哪里找核心服务。</p><ol><li>打开 <code>config/plugins/napcat_adapter_plugin/config.toml</code> 文件。</li><li>找到 <code>[maibot_server]</code> 配置节。</li><li>将其中的 <code>port</code> 值修改为<strong>与 <code>.env</code> 文件中 <code>PORT</code> 值相同</strong>的新端口。<div class="language-toml"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">maibot_server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 连接麦麦的ws服务设置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">host = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;localhost&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">port = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8088</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # &lt;-- 确保这里和 .env 中的新端口一致</span></span></code></pre></div></li></ol><p><strong>修改完成后，保存文件并重启 MoFox_Bot 即可生效。</strong></p><blockquote><p><strong>⚠️ 重要提示</strong>: 这两处修改<strong>必须同步进行</strong>！如果只修改了一处，会导致适配器无法连接到核心服务，机器人将无法接收和发送消息。</p></blockquote><h2 id="场景二-修改-napcat-适配器端口-例如-8095-端口被占用" tabindex="-1">场景二：修改 Napcat 适配器端口 (例如 <code>8095</code> 端口被占用) <a class="header-anchor" href="#场景二-修改-napcat-适配器端口-例如-8095-端口被占用" aria-label="Permalink to “场景二：修改 Napcat 适配器端口 (例如 8095 端口被占用)”">​</a></h2><p>这个端口是 MoFox_Bot 和 Napcat QQ 客户端之间的“桥梁”。修改它的前提是，你<strong>也需要修改 Napcat QQ 客户端中的反向 WebSocket 端口设置</strong>。</p><p><strong>操作步骤 (共两步)</strong>：</p><h3 id="第一步-修改-napcat-qq-客户端设置" tabindex="-1">第一步：修改 Napcat QQ 客户端设置 <a class="header-anchor" href="#第一步-修改-napcat-qq-客户端设置" aria-label="Permalink to “第一步：修改 Napcat QQ 客户端设置”">​</a></h3><ol><li>打开 Napcat QQ 客户端。</li><li>进入 <code>OneBot v11</code> 设置。</li><li>找到你添加的反向 WebSocket 地址 (例如 <code>ws://127.0.0.1:8095</code>)。</li><li>将其中的端口号修改为一个新的、未被占用的端口。例如，修改为 <code>9595</code>。</li><li>保存设置。</li></ol><h3 id="第二步-修改-mofox-bot-适配器插件配置" tabindex="-1">第二步：修改 MoFox_Bot 适配器插件配置 <a class="header-anchor" href="#第二步-修改-mofox-bot-适配器插件配置" aria-label="Permalink to “第二步：修改 MoFox_Bot 适配器插件配置”">​</a></h3><ol><li>打开 <code>config/plugins/napcat_adapter_plugin/config.toml</code> 文件。</li><li>找到 <code>[napcat_server]</code> 配置节。</li><li>将其中的 <code>port</code> 值修改为<strong>与 Napcat QQ 客户端中设置的新端口完全一致</strong>。<div class="language-toml"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">napcat_server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Napcat连接的ws服务设置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mode = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;reverse&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">host = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;localhost&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">port = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9595</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             # &lt;-- 确保这里和 Napcat 客户端的新端口一致</span></span></code></pre></div></li></ol><p><strong>修改完成后，保存文件，然后按照“先启动 Napcat QQ，再启动 MoFox_Bot”的顺序重启，即可生效。</strong></p><blockquote><p><strong>💡 总结</strong>:</p><ul><li>修改 MoFox_Bot <strong>内部端口</strong>，需要同时改 <code>.env</code> 和 <code>napcat_adapter_plugin</code> 的配置。</li><li>修改 <strong>Napcat 连接端口</strong>，需要同时改 <code>Napcat QQ 客户端</code> 和 <code>napcat_adapter_plugin</code> 的配置。</li></ul><p>请根据你的实际情况，选择对应的修改方案。</p></blockquote>`,24)),o(i),o(t)])}const E=e(c,[["render",r]]);export{u as __pageData,E as default};
