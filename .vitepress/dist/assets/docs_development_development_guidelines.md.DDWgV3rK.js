import{_ as l,I as s,c as t,o,a3 as r,J as a}from"./chunks/framework.Coydrlbh.js";const b=JSON.parse('{"title":"Development Guidelines","description":"","frontmatter":{},"headers":[],"relativePath":"docs/development/development_guidelines.md","filePath":"docs/development/development_guidelines.md","lastUpdated":1756555974000}'),d={name:"docs/development/development_guidelines.md"};function h(p,e,c,k,g,_){const i=s("NolebaseGitContributors"),n=s("NolebaseGitChangelog");return o(),t("div",null,[e[0]||(e[0]=r(`<h1 id="development-guidelines" tabindex="-1">Development Guidelines <a class="header-anchor" href="#development-guidelines" aria-label="Permalink to “Development Guidelines”">​</a></h1><p>为了确保项目的代码质量、可维护性和协作效率，所有贡献者都应遵守以下开发准则。</p><h2 id="_1-代码提交前检查" tabindex="-1">1. 代码提交前检查 <a class="header-anchor" href="#_1-代码提交前检查" aria-label="Permalink to “1. 代码提交前检查”">​</a></h2><p>在提交任何代码之前，<strong>必须</strong>使用 <code>ruff</code> 进行代码格式化和质量检查。这有助于统一代码风格，并及早发现潜在问题。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ruff</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> check</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --fix</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ruff</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> format</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><h2 id="_2-测试文件的存放" tabindex="-1">2. 测试文件的存放 <a class="header-anchor" href="#_2-测试文件的存放" aria-label="Permalink to “2. 测试文件的存放”">​</a></h2><p>所有测试文件都应统一放置在项目根目录下的 <code>test/</code> 目录中。请确保测试文件的命名清晰，并与被测试的模块相对应。</p><h2 id="_3-ai-辅助编程后的审查" tabindex="-1">3. AI 辅助编程后的审查 <a class="header-anchor" href="#_3-ai-辅助编程后的审查" aria-label="Permalink to “3. AI 辅助编程后的审查”">​</a></h2><p>我们鼓励使用 AI 工具（如 GitHub Copilot）来提高开发效率，但<strong>严禁</strong>直接提交由 AI 生成的未经审查的代码。您必须：</p><ul><li><strong>理解每一行代码</strong>：确保您完全理解 AI 生成的代码的功能和逻辑。</li><li><strong>进行代码审查</strong>：像审查他人代码一样，仔细检查 AI 生成的代码是否存在逻辑错误、安全漏洞或不符合项目规范的地方。</li><li><strong>承担最终责任</strong>：请记住，您是代码的最终负责人。</li></ul><h2 id="_4-清理无用的-markdown-文件" tabindex="-1">4. 清理无用的 Markdown 文件 <a class="header-anchor" href="#_4-清理无用的-markdown-文件" aria-label="Permalink to “4. 清理无用的 Markdown 文件”">​</a></h2><p>由 AI 工具生成的、与项目无关的 Markdown 文件（例如 <code>README.md</code> 的变体、示例文件等）应当被删除。如果这些文件包含有价值的信息，请将其移动到 <code>docs/</code> 目录下，并进行适当的整理。</p><h2 id="_5-明确标注未完成的功能" tabindex="-1">5. 明确标注未完成的功能 <a class="header-anchor" href="#_5-明确标注未完成的功能" aria-label="Permalink to “5. 明确标注未完成的功能”">​</a></h2><p>如果您提交的代码包含了未完全实现的功能，<strong>必须</strong>在相关代码位置使用 <code>TODO</code> 注释进行明确标注。注释中应简要说明待办事项。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TODO</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">: 实现用户认证逻辑</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> login</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(username, password):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    pass</span></span></code></pre></div><h2 id="_6-保持专业-避免个人纠纷" tabindex="-1">6. 保持专业，避免个人纠纷 <a class="header-anchor" href="#_6-保持专业-避免个人纠纷" aria-label="Permalink to “6. 保持专业，避免个人纠纷”">​</a></h2><p>本项目是一个协作的开源社区。请将所有讨论和交流集中在技术和项目本身。严禁将个人恩怨或与项目无关的争论带入到 issue、pull request 或任何其他项目相关的沟通渠道中。</p><h2 id="_7-分支管理策略" tabindex="-1">7. 分支管理策略 <a class="header-anchor" href="#_7-分支管理策略" aria-label="Permalink to “7. 分支管理策略”">​</a></h2><ul><li><strong><code>develop</code> 分支</strong>：所有新功能开发和代码修改都应提交到 <code>develop</code> 分支。请基于最新的 <code>develop</code> 分支创建您的特性分支。</li><li><strong><code>master</code> 分支</strong>：<code>master</code> 分支是稳定版本分支，只接受来自 <code>develop</code> 分支的合并请求（Merge Request）。严禁直接向 <code>master</code> 分支推送代码。</li></ul><h2 id="_8-保持模块独立性" tabindex="-1">8. 保持模块独立性 <a class="header-anchor" href="#_8-保持模块独立性" aria-label="Permalink to “8. 保持模块独立性”">​</a></h2><p>在添加新模块时，请遵循“高内聚，低耦合”的原则。</p><ul><li><strong>独立性</strong>：新模块应尽可能独立，减少对项目其他部分的直接依赖。</li><li><strong>接口清晰</strong>：如果需要与核心代码交互，应通过定义清晰的 API 或事件来进行，而不是直接修改核心逻辑。</li><li><strong>例外</strong>：对于项目基础核心功能的提交，可以不受此限制，但需要经过更严格的审查。</li></ul>`,22)),a(i),a(n)])}const u=l(d,[["render",h]]);export{b as __pageData,u as default};
