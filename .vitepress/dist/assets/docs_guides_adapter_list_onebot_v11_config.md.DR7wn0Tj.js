import{_ as e,I as s,c as l,o as n,a3 as r,J as a}from"./chunks/framework.Coydrlbh.js";const E=JSON.parse('{"title":"OneBot v11 内置适配器配置指南","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guides/adapter_list/onebot_v11_config.md","filePath":"docs/guides/adapter_list/onebot_v11_config.md","lastUpdated":1758621690000}'),p={name:"docs/guides/adapter_list/onebot_v11_config.md"};function d(c,i,h,g,k,u){const t=s("NolebaseGitContributors"),o=s("NolebaseGitChangelog");return n(),l("div",null,[i[0]||(i[0]=r(`<h1 id="onebot-v11-内置适配器配置指南" tabindex="-1">OneBot v11 内置适配器配置指南 <a class="header-anchor" href="#onebot-v11-内置适配器配置指南" aria-label="Permalink to “OneBot v11 内置适配器配置指南”">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to “概述”">​</a></h2><p>欢迎使用 MoFox_Bot 内置的 OneBot v11 (Napcat) 适配器。</p><p>将适配器“内置”于主程序中，是官方最为推荐的最佳实践。它就像是为机器人配备了一个“官方翻译耳机”，无需任何外部转接，直接就能与 Napcat QQ 客户端进行稳定、高效的沟通。</p><p><strong>使用内置适配器的优势</strong>:</p><ul><li><strong>部署简化</strong>：仅需下载和运行 MoFox_Bot 主项目。</li><li><strong>操作便捷</strong>：只需管理单个进程。</li><li><strong>配置统一</strong>：所有相关设置均在主项目的配置文件中完成。</li></ul><p>本指南将专注于指导你如何配置并启用这个强大的内置连接器。</p><h2 id="前置条件" tabindex="-1">前置条件 <a class="header-anchor" href="#前置条件" aria-label="Permalink to “前置条件”">​</a></h2><p>在开始本章之前，我们假定你已经<strong>基本完成</strong>了 MoFox_Bot 的主程序部署，至少包括：</p><ol><li>成功安装了 Python 环境和项目依赖 (<code>requirements.txt</code>)。</li><li>完成了 <code>.env</code>, <code>bot_config.toml</code>, <code>model_config.toml</code> 三个核心文件的基础配置。</li><li>已经安装并成功登录了 <strong>Napcat QQ 客户端</strong>。</li></ol><p>如果你对上述步骤还不熟悉，请务必先返回，并严格参照主部署指南完成准备工作。</p><h2 id="第一步-生成插件配置文件" tabindex="-1">第一步：生成插件配置文件 <a class="header-anchor" href="#第一步-生成插件配置文件" aria-label="Permalink to “第一步：生成插件配置文件”">​</a></h2><p>MoFox_Bot 设计得非常“聪明”，它会在第一次启动时，自动检测所有内置的插件，并为它们创建默认的配置文件。</p><ol><li><p><strong>首次启动</strong>:</p><ul><li>打开你的命令行终端，并<strong>激活 Python 虚拟环境</strong> (你应该能看到 <code>(.venv)</code> 这样的标记)。</li><li>确保你当前的目录位于 <code>MoFox_Bot</code> 项目的根目录。</li><li>执行以下命令，来启动一次 MoFox_Bot：<div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bot.py</span></span></code></pre></div></li><li>程序启动后，你会看到大量的日志信息。当日志滚动停止，并且没有新的信息出现时，说明程序已经完成了初始化工作。</li></ul><blockquote><p><strong>💡 第一次启动就失败了怎么办？</strong> 如果程序在启动过程中直接报错并退出了，<strong>99% 的可能性是你的核心配置 (<code>.env</code>, <code>bot_config.toml</code>, <code>model_config.toml</code>) 有误</strong>。请回头仔细检查。</p></blockquote></li><li><p><strong>生成配置并关闭</strong>:</p><ul><li>当程序稳定运行后，我们生成配置文件的目的就已经达成。现在，请在命令行窗口中，按下 <code>Ctrl + C</code> 来关闭程序。</li></ul></li></ol><h2 id="第二步-启用并配置插件" tabindex="-1">第二步：启用并配置插件 <a class="header-anchor" href="#第二步-启用并配置插件" aria-label="Permalink to “第二步：启用并配置插件”">​</a></h2><p>经过上一步，所有内置插件的默认配置文件都已经被自动创建好了。现在，我们来正式配置它。</p><ol><li><p><strong>找到配置文件</strong>:</p><ul><li>请打开以下路径的文件： <code>config/plugins/napcat_adapter_plugin/config.toml</code></li></ul></li><li><p><strong>启用插件 (关键)</strong>:</p><ul><li>用你的代码编辑器打开该文件，找到 <code>[plugin]</code> 配置节，将 <code>enabled</code> 的值从 <code>false</code> 修改为 <code>true</code>。这是开启适配器的总开关。<div class="language-toml"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">enabled = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # &lt;--- 就是这里，把它改成 true</span></span></code></pre></div></li></ul></li><li><p><strong>配置 Napcat 连接 (核心)</strong>:</p><ul><li>在同一个文件中，向下找到 <code>[napcat_server]</code> 配置节。</li><li>这里的 <code>port</code> 值（默认为 <code>8095</code>）<strong>必须</strong>与你在 <strong>Napcat QQ 客户端</strong>的 <code>OneBot v11</code> 设置中，添加的<strong>反向 WebSocket</strong> 地址中的端口号<strong>完全一致</strong>。</li><li>请仔细核对，如果不一致，请修改此处的 <code>port</code> 值。</li></ul><blockquote><p><strong>举个例子</strong>: 如果你在 Napcat 客户端中设置的反向 WS 地址是 <code>ws://127.0.0.1:12345</code>，那么这里的 <code>port</code> 就应该被修改为 <code>12345</code>。</p></blockquote></li><li><p><strong>检查内部服务连接</strong>:</p><ul><li>继续向下，找到 <code>[maibot_server]</code> 配置节。</li><li>这里的 <code>port</code> 值（默认为 <code>8000</code>）需要与你在 <code>MoFox_Bot</code> 根目录下的 <code>.env</code> 文件中设置的 <code>PORT</code> 值保持一致。通常情况下，你不需要修改它。</li></ul></li></ol><h2 id="第三步-启动与验证" tabindex="-1">第三步：启动与验证 <a class="header-anchor" href="#第三步-启动与验证" aria-label="Permalink to “第三步：启动与验证”">​</a></h2><p>所有配置都已完成，现在，让我们正式启动，见证奇迹。</p><ol><li><p><strong>启动顺序 (非常重要)</strong></p><ul><li><strong>第一步：启动并登录 Napcat QQ</strong><ul><li>打开你已经安装好的 Napcat QQ 客户端，并确保机器人 QQ 账号<strong>成功登录</strong>。</li></ul></li><li><strong>第二步：运行 MoFox_Bot</strong><ul><li>回到你的命令行终端窗口（确保虚拟环境已激活，且位于项目根目录）。</li><li>执行最终的启动命令：<div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bot.py</span></span></code></pre></div></li></ul></li></ul></li><li><p><strong>观察日志，判断成功</strong></p><ul><li>当你在日志中看到类似以下几条关键信息时，就代表你的机器人已经成功启动并连接到了 QQ 平台：<div class="language-log"><button title="Copy Code" class="copy"></button><span class="lang">log</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">INFO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:     Uvicorn running on </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">http://127.0.0.1:8000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Press CTRL+C to quit)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napcat_adapter - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">INFO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> - 正在启动 adapter，连接模式: reverse</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napcat_adapter - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">INFO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> - WebSocket server is listening on localhost:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8095</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napcat_adapter - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">INFO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> - Napcat client connected from ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">napcat_adapter - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">INFO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> - MaiBot router连接已建立</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">main - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">INFO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> - MoFox_Bot 初始化完成</span></span></code></pre></div></li><li>看到 <code>Napcat client connected</code> 是成功的关键标志！</li></ul></li><li><p><strong>测试机器人</strong></p><ul><li>现在，打开你的 QQ，向你的机器人账号发送一条消息。如果它回复了你，那么…… <strong>恭喜你，配置成功！</strong></li></ul></li></ol><h2 id="故障排除" tabindex="-1">故障排除 <a class="header-anchor" href="#故障排除" aria-label="Permalink to “故障排除”">​</a></h2><details><summary><b>Q1: 启动成功，但日志里迟迟没有 \`Napcat client connected\` 信息？</b></summary><p>这通常意味着 MoFox_Bot 和 Napcat QQ 客户端之间的“神经”没有接上。请按以下步骤排查：</p><ol><li><strong>检查 Napcat QQ</strong>: 确保 Napcat QQ 客户端本身已成功登录并处于在线状态。</li><li><strong>检查端口号</strong>: 这是最常见的原因。请再次核对 <code>config/plugins/napcat_adapter_plugin/config.toml</code> 文件中 <code>[napcat_server]</code> 下的 <code>port</code> 值，是否与你 Napcat QQ 客户端里设置的<strong>反向 WebSocket 端口</strong>完全一致。</li><li><strong>检查防火墙</strong>: 确保防火墙或安全组没有阻止相应的端口。</li><li><strong>检查 IP 地址</strong>: 确保 <code>config.toml</code> 中的 <code>host</code> (<code>localhost</code>) 和 Napcat 中的 IP (<code>127.0.0.1</code>) 是匹配的。</li></ol></details><details><summary><b>Q2: 机器人成功连接，但在 QQ 里不回复？</b></summary><p>这通常是配置问题或napcat服务问题。</p><ol><li><strong>检查 Napcat QQ</strong>: 确保 Napcat QQ 客户端本身已成功登录并处于在线状态,以及有没有连接上内置的适配器。</li><li><strong>检查白名单</strong>: 检查 <code>config/plugins/napcat_adapter_plugin/config.toml</code> 文件中 <code>[features]</code> 部分的 <code>group_list</code> 和 <code>private_list</code>。如果你开启了白名单，请确保你测试的群聊或私聊已经被加了进去。</li><li><strong>查看日志</strong>: 观察机器人后台的命令行窗口。当你给机器人发消息时，看看日志是否刷新，是否有 <code>ERROR</code> 级别的红色错误信息。</li></ol></details>`,23)),a(t),a(o)])}const _=e(p,[["render",d]]);export{E as __pageData,_ as default};
